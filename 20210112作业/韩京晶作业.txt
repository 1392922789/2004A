1.写一个链式调用的Promise
\\
  methods: {
    guojia() {
      var p1 = new Promise(function(resolve, reject) {
        setTimeout(() => {
          console.log("中国");
          let data = "中国" + "河北";
          resolve(data);
        }, 1000);
      });
      return p1;
    },
    shengfen(data) {
      var p2 = new Promise(function(resolve, reject) {
        setTimeout(() => {
          console.log(data);
          let datas = data + "保定";
          resolve(datas);
        }, 1000);
      });
      return p2;
    },
    shi(data) {
      var p3 = new Promise(function(resolve, reject) {
        setTimeout(function() {
          console.log(data);
          let datas = data + "地下室";
          resolve(datas);
        }, 1000);
      });
    }
  },
  mounted() {
    //接下来去调用一下
    this.guojia()
      .then(function(data) {
        return that.shengfen(data);
      })
      .then(function(data) {
        return that.shi(data);
      })
      .catch(res => {
        console.log(res);
      });
  }
\\

2.使用async await写一个案例
async function hello(){
  return 'hello world';
}
hello().then(result=>{
  console.log(result);
})
console.log('我是先执行的');

function awaitMethod(num){
  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve(2*num);
    },2000)
  })
}
async function test (){
  let result = await awaitMethod(30);
  console.log(result);
}
test();//60

3.==和===的区别
\\==是判断等于的意思，返回的是一个布尔值
== 在比较时等号左右两侧数据类型不同时会先转成相同数据类型，再比较
\\===是判断类型
\\== 是相对比较； === 是绝对比较

4.var name='';let name = '';会发生什么事？
显示未定义，

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？
 声明会变量提升，声明前可调用，值是undefined，

6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();

写出运行结果和为什么？
运行结果：我今年13
	 我今年12
	 我今年12
	 我今年12


7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果：张三、李四

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象