1.写一个链式调用的Promise

const p = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(333);
    }, 1000)
});
p.then(res => {
    console.log(res);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('444=====');
        }, 5000);
    })
}).then(res => {
    console.log(res)
}）

2.使用async await写一个案例
async getresult () {
                let location = await this.getLocation(this.Num);
                if (location.data.success) {
                    let province = location.data.obj.province;
                    let city = location.data.obj.city;
                    let result = await this.getFaceList(province, city);
                    if (result.data.success) {
                        this.faceList = result.data.obj;
                    }
                }
            }
3.==和===的区别
 1.=是赋值的意思，是让左边的值等于右边的值，比如：var a=1;那么现在alert(a)就是1，当然右边可以是变量，如：var a=1; var b也是1;

 2.==是判断等于的意思，返回的是一个布尔值，
  比如：alert(1==1);将返回true，因为1等于1，如果 alert(1=='1');也返回true，虽说后面的1是字符串类型，但是==是不判断类型的，所以还是true，如果：alert(1=='2')就是false了，因为1不等于2;

 3.===也是判断的，但是它要比==判断的严谨一点，它的判断必须什么都相等，
比如说类型，值;如： alert(1===1);将返回true，因为它们都是1，而且都是数字类型，如果：alert(1==='1');将返回false，因为前面的1是数字类型，后面的1是字符串类型。


4.var name='';let name = '';会发生什么事？
 var声明的变量存在变量提升
 let不存在变量提升

5.const obj = {a:1};
var b = 1; 
obj.a = 2;b = 2; 会发生什么事？

6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();

写出运行结果和为什么？
我今年13
我今年12
我今年12
我今年12

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果 ：‘张三，‘李四’


8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象