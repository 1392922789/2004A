 1.写一个链式调用的Promise
  new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve({test:1})
            resolve({test:2})
            reject({test:2})
        }, 1000)
    }).then((data) => {
        console.log('result1',data);
    },(data2) => {
        console.log('result2',data2);
    }).then((data)=>{
        console.log('result2',data);
    })
2.使用async await写一个案例
    async getData(){
        var res=await this.$axios.get("接口")
        console.log(res);
    }
3.==和===的区别
==是两边相等就可以，===是类型也要相等
4.var name='';let name = '';
会发生什么事？
标识符name已经声明

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？
b=2,a显示未定义
6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);//13
    //this指向当前的age
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);//12
    //this指向父级的上下文
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();//12 因为var了一个全局tall，tall的this指向的window，而tall中obj.tellMe中的this指向的是window下的变量，也就是指向的是window下的age，
tell = obj1.tellMe;
tell();//12

写出运行结果和为什么？

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果
张三,李四
8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象
//第八题写不出来