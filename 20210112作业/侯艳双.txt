1.写一个链式调用的Promise


const p = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(333);
    }, 1000)
});
p.then(res => {
    console.log(res);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('444=====');
        }, 5000);
    })
}).then(res => {
    console.log(res)




2.使用async await写一个案例

methods(){
async  login(){
           const res=await this.axios.get('请求数据地址')
  }
}


3.==和===的区别

'2'==2

'2'===2报错
 
两个==是相等 三个是全等


4.var name='';let name = '';会发生什么事？
会报错  因为let是不能重复声明定义的  let是受块级作用域限制 也存在暂存性四区 






5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？


const 声明变量以后必须赋值 不赋值就会报错 但是 const对象里面的值是可以改变的
所以打印的是2




6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();
我今年13
我今年12
我今年12
我今年12

写出运行结果和为什么？
因为第一个往上一级查找 找到了返回 所以13
第二个是用的箭头函数 因为箭头函数永远指向父级的上下文 所以12
直接打印也是12 
然后下面有个赋值操作 不懂为什么等于12


7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果
张三 李四



8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象

不会怎么写  真不会


