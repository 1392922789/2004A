1.写一个链式调用的Promise
const p = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(333);
    }, 1000)
});
p.then(res => {
    console.log(res);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('444=====');
        }, 3000);
    })
}).then(res => {
    console.log(res)
})

2.使用async await写一个案例
const getData = () => new Promise(resolve => setTimeout(() => resolve("data"), 1000))
async function test() {
  const data = await getData()
  console.log('data: ', data);
  const data2 = await getData()
  console.log('data2: ', data2);
  return 'success'
}
// 1秒后打印data 再过一秒打印data2 最后打印success
test().then(res => console.log(res))

3.==和===的区别
  ==表示只要值相等即可为真，就可以相等
  ===则要求不仅值相等，而且也要求类型相同，只要其中一样不同，那么就不相等

4.var name='';let name = '';会发生什么事？
	会报错var声明的变量存在变量 提升即变量可以在声明之前调用，值为undefined。
   let声明的的变量，只在块级作用域下有效,let不允许重复声明变量的，不存在变量提升，暂时性死区
    const 声明常量  声明了就要赋值  不可改变的变量  ==>规范，命名都是大写 其他和let差不多

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？
第一次：2
第二次：报错
首先会存在一个变量的提升也就是var b = 1;
const不存在变量提升，声明常亮
然后执行const obj = {a:1};
最后执行这两个obj.a = 2;b = 2;

6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();
写出运行结果和为什么？
我今年13    // 函数调用tellMe()
我今年undefined  // 语法错误tellMe: () =>
我今年undefined // 语法错误tellMe: () =>
我今年undefined// 语法错误tellMe: () =>
undefined

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果
var p = new person();   //实例一个对象person，person等于张三
console.log(p.name);   //李四
delete p.name;
console.log(p.name);   //undefined

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象
function women(name, age) {
  this.name = name;
  this.age = age;
}
women.prototype.eat = function () {
  console.log(`我叫${this.name1}，会吃了`);
}
women.prototype.tell = function () {
  console.log(`我叫${this.name1}，今年${this.age}岁`);
}
women.isWomen = function (obj) {
  if (obj instanceof women) {
    console.log('这是一个women的实例');
  } else {
    console.log('这不是一个women的实例');
  }
}