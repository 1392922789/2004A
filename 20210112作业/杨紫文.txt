1.写一个链式调用的Promise
new Promise((resolve,reject)=>{
	reject('a')
}).then((c)=>{
	console.log('then'+c)
}).catch((e)=>{
	console.log('error'+e)
	return abc;
}).then((c)=>{
	console.log(c)
	return efg
}).then((c)=>{
	console.log(c)
})
2.使用async await写一个案例
function fn(){
	return new Promise((resolve,reject)=>{
		setTimeout(()=>{
			reject(hi,dear tom)
		},1000); 
	})
}
async function fn(){
	try{
		awiait fn()
	}.catch(e){
		console.log(e)
	}
}
3.==和===的区别

==：用来检测两个操作数是否相等
===：用来检测两个操作数是否严格相等  值和类型

4.var name='';let name = '';会发生什么事？
暂时性死区
let声明的变量不能在声明变量之前调用，而var声明的变量就可以使用
5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？
 const声明的变量名是不可以改变 但他的值是存在一个变量（a=2）所以可以改变  所以a改变以后就是2 
6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);
  }
}
obj.tellMe();   我今年十三岁
obj1.tellMe();  我今年十二岁
var tell = obj.tellMe;
tell();  我今年十二岁
tell = obj1.tellMe;
tell();  我今年十二岁

写出运行结果和为什么？

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);   张三
delete p.name;
console.log(p.name);   李四
写出打印结果

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象