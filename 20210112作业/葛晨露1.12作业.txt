1.写一个链式调用的Promise
new Promise((resolve,reject) =>{
        resolve();
        reject();
    }).then(() => {
        console.log('hello')
    },()=>{
        console.log('error')
    })


2.使用async await写一个案例

const foo = async () => { 
 
    try { 
 
        await fn(); 
 
    } catch (e) { 
 
        console.log(e);  // some error 
    } 
} 


3.==和===的区别
== 等于 （隐式转换）
例如：1 == ‘1’
=== 全等于（数值和数据类型都必须相等）


4.var name='';let name = '';会发生什么事？
会报错，var可以重复声明，但let不可以重复声明，重复声明会报错

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？

会报错const定义的变量不可修改，var 定义的变量可以修改


6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);     // 我今年13
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);    //我今年12
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();

写出运行结果和为什么？

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);    //张三
delete p.name;
console.log(p.name);   //李四
写出打印结果

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.name}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象