1.写一个链式调用的Promise

 promise("参数").then(funcion(data1){

成功的
}).then.（function（data2）{
第二次成功后执行的
}）.catch（function（error）{
错误执行的
}）



2.使用async await写一个案例
	比如请求接口数据
		
async  fn（）{
		let  res = await this.$axios.get('接口地址')
}


3.==和===的区别
==是等于，
===是全等包括地址，数据类型
	

4.var name='';let name = '';会发生什么事？
应该不会报错吧

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？
		
应该都不会报错 
var 我就不说了随便定义
const obj 地址应该没改 所以应该不会报错

6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);  13
	因为谁调用this.指向谁
  }
}


var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age); 15
	箭头函数的this指向父亲的上下文
  }
}
obj.tellMe();
obj1.tellMe();

var tell = obj.tellMe;
tell();
tell = obj1.tellMe;
tell();

写出运行结果和为什么？

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);
delete p.name;
console.log(p.name);
写出打印结果
张三   李四 

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象
这个真不会啊