1.写一个链式调用的Promise

const p = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(333);
    }, 1000)
});
p.then(res => {
    console.log(res);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('444=====');
        }, 5000);
    })
}).then(res => {
    console.log(res)
})


2.使用async await写一个案例

//  async getlogList（id）{
      const {data：res} = await logLIst （id）
}		        （获取路径的名字）

3.==和===的区别  

//== 是条件判断语句中是否相等的意思 “1”==1。 === 是绝对比较 “1”===“1”

4.var name='';let name = '';会发生什么事？  // 报错 let不能重复声明变量  

5.const obj = {a:1};var b = 1; obj.a = 2;b = 2; 会发生什么事？//2  const一旦声明变量，就必须立即初始化，不能留到以后赋值。

6.var age = 12;
var obj = {
  age: 13,
  tellMe() {
    console.log('我今年' + this.age);      //13
  }
}
var obj1 = {
  age: 15,
  tellMe: () => {
    console.log('我今年' + this.age);   //12  箭头函数指向它父级上下文
  }
}
obj.tellMe();
obj1.tellMe();
var tell = obj.tellMe;  
tell();     //12
tell = obj1.tellMe;
tell();    //12

写出运行结果和为什么？

7.function person() {
  this.name = '张三';
}
person.prototype.name = '李四';
var p = new person();
console.log(p.name);    //张三
delete p.name;
console.log(p.name);   //李四
写出打印结果

8.function human(name, age) {
  this.name = name;
  this.age = age;
}
human.prototype.eat = function () {
  console.log(`我叫${this.namee}，会吃饭了`);
}
human.prototype.tell = function () {
  console.log(`我叫${this.namee}，今年${this.age}岁`);
}
human.isHuman = function (obj) {
  if (obj instanceof human) {
    console.log('这是一个human的实例');
  } else {
    console.log('这不是一个human的实例');
  }
}
//请使用class定义一个功能一样的human对象

class Human {
            constructor(name, age) {
                this.name = name;
                this.age = age;
            }
            eat() {
                return console.log(`我叫${this.namee}，会吃饭了`);
            }
            tell() {
                return console.log(`我叫${this.namee}，今年${this.age}岁`);
            }
            isHuman(obj) {
                if (obj instanceof Human) {
                    console.log('这是一个human的实例');
                } else {
                    console.log('这不是一个human的实例');
                }
            }
        }

