第三章：语言基础
3.1 语法
1，区分大小写 
2，标志符，就是变量、函数、属性或函数参数的名称。
    驼峰式命名：虽然写法不是强制的，但因为这种形式跟ECMAScript内置函数和对象的命名方式一致，所以算是最佳事件
3，注释：
单行注释和多行注释
4，严格模式
    可以全局使用 "use strict"
    也可以定义在函数体内，指定一个函数在严格模式下执行
    所有现代浏览器都支持严格模式
    5，语句
    语句以分号结尾
    代码块

3.2 关键字和保留字
    case void yield 样式关键字
    保留字
    enum implemments package public
    interface protected static let private

3.3变量
    变量是松散类型的，意思是变量可以用于保存任何类型的数据。
    每个变量不过是一个用于保存任意值的命名占位符

    三个关键字可以声明变量；var ，let,const

    3.31 var 
    可以多次声明变量，声明多个多个变量
    var string = "hi"
    如果去掉 var  string=“hi"吃屎string是全局变量

    变量提升   只是变量的提升命名不提升
    let 
    1,let声明的范围是块作用域，而var声明的范围是函数作用域

    2,let声明的变量不会别提升
         console.log(b); //--undefined
       var b = 2 

       console.log(a); //----a没有定义
       let a = 1
    3,不会和window相映射
        var a = 0;
      console.log(window.a); //--0
      let c = 0;
      console.log(window.c);--undefind
    4,let 在条件判断中，try catch中尽量不使用let，因为let是块作用域，
    5，for循环和定时器共同使用，输出0,1,2,3
        将var改成let 
    
    const
    1,const 声明的变量一旦声明不能修改，
    2，和let一样 不与window相映射 受限于块级 暂存性死区
    3，定义对象中的属性可以的，
    4， 使用到for in，for of 循环中

    优先使用const，如果需要更改的则使用let，以后var会用的很少。
    因为变量有了明确的作用域、声明位置，以及不变的值。
3.4 数据类型
    3.41，undefined 定义未被初始化，
    未定义会报错；
    用typeOf 检查  定义未被初始胡和未定义都是undefined
        undefined是一个假值
    var message ;
      console.log(message);//undefined
      console.log(d);//报错

      console.log(typeof message);//undefined
      console.log(typeof d); //---undefined
    3.42，null
      1，null值表示一个空对象指针，所以给typeof会返回“object”
      2，在定义将来要报错对象值的变量时候，建议使用null来初始化
        if(car! = null){
            //表示car是一个对象的引用
        }
      3，undefined是由null值派生来的，定义为表面上的相等
      console.log(undefined == null)  -----true
      4,即使null和undefined 有关系，他们的用途完全不一样。永远不必显式的将变量值设置为 undefined。当时null之哟啊变量要 报错对象，而当时有解忧对象可以保存，可以用null来填充变量
    3.43 boolean类型
        1，boolean 有两个字面量：true和false
        2，可以用来赋值
            let found = true;
            let lost = false;
        3,是区分大小写的
            True False是有效的标识符，但不是布尔值
        4，可用Boolean()将其他的数据类型转换成布尔值
        空字符串"",数值型 0，NaN ,null,undefined 转换成false；；；
        其他的转换成true
        var msg = "hello";
        if(msg){
            console.log("你好"); 
        }       //会打印出 "你好"
    3.44 Number 类型
        不明白
        浮点数和整数
        NaN 不是数值
            isNaN()用于判断是不是数值型
        转换成数值型Number(),parseInt(),parseFloat()
            一样用parseInt()转换成整型，parseFloat()转换浮点型
    3.45字符串
        1，字符串可以使用双引号，单引号，反引号
        2，字符字面量
            \n 换行 \t 制表 \b退格 \r回车 
            \f换页 \\\\反斜杠 \' 单引号……

        3,，字符串是不可变的，修改某个变量中的字符串，必须先销毁原始的字符串，将包含新值的保存到变量
        4，转换为字符串
            toString();
            但是null,undefined用string()来转换成自身的字面量
        5，模板字符串
            标签那部分没看明白
    3.46 Symbol 符号 唯一的标志符
            
    3.47 Object类型
        在ECMAScript中的Object时候派生其他对象的基类。Object类型的所有属性和方法在
        派生的对象上同样存在
        每个Object实例都有如下属性和方法
        1，constructor 用于常见当期那对象的函数。在前面的例子中，这个属性的值就是Object()hanshu 
        2,hasOwnProperty(propertyName);:用于判断当前对象实例时候存在给定的属性。
            检查的是字符串 o.hasOwnProperty('name')
        3,isPrototypeof(object):用于判断当前对象是否为另一个对象的原型
        4，propertyIsEnumerable(propertyName) ：用于判断给定
            的属性是否可以使用（本章稍后讨论的） for-in 语句枚举。
            与 hasOwnProperty() 一样，属性名必须是字符串。
        5，toString()返回对象的字符串表示
        6valueOf() 返回对象对应的字符串、数值或布尔值表示。通常与toString(d fanhuizhi xinagong )
3.5 操作符
    3.51 一元操作符
    3.52位操作符
    3.53布尔操作符
        逻辑或
        逻辑非
        逻辑与
    3.54 乘性操作符，除性操作符，取模
    3.55 指数操作符 es7新增  
            Math.pow() ===>对应的操作符是 **
            console.log(Math.pow(3,2))===9
            console.log(3 ** 2)===9

            console.log(Math.pow(16，0.5))===4
            console.log(16**0.5)===4

        还可以赋值操作
            let squar = 3;
            squar **=2;
            console.log(squared);====9
    3.56 加法 +
         减法 -
    3.57 关系操作符
        < > <= >=
    3.58 == === != !==
    3.59 条件操作符(二元表达式)
    3.6逗号操作符
        用来在一条语句中执行多个操作
