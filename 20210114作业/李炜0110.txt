1.用解构赋值的方式将 PageIndex,PageSize,id,category,subject,format,changed解构出来
{
  "paramz": {
    "feeds": 
      [{
        "id": 299076,
        "category": "article",
        "data": {
          "subject": "荔枝新闻3.0：不止是阅读",
          "format": "txt",
          "changed": "2015-09-22 16:01:41"
        }
      }],
    "PageIndex": 1,
    "PageSize": 20
  }
}
var {paramz:{feeds:{id,category,data:{subject,format,changed}}},PageIndex,PageSize} = obj
2.
//获取用户
function getUser(id) {
    return Promise.resolve(id + 1);
}

//根据用户获取角色
function getRoleByUser(id) {
    return Promise.resolve(id + 1);
}

//根据角色获取权限
function getRightsByRole(id) {
    return Promise.resolve(id + 1);
}

function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });
}
//改为同步的方式执行
function ab() {
const objuser = wacth  getUser()
const  objbyuser = wacth getRoleByUser(objuser) 
const objbyrole = wach getRightsByRole(objbyuser)
            
}
3.
function Number(length) {
    this.length = length;
}

Numbe.prototype.push = function(arr) {

}

Numbe.prototype.pop = function() {

}

Numbe.isNumber = function(arr) {

}

//转换为class的方式
class arr{
    constructor(length) {
    this.length = length;
}
push(arr){}
pop(){}
static isNumber(arr){}
}

5.阅读本篇文章https://segmentfault.com/a/1190000007535316，
写出看懂和没看懂的地方。
async 他可以吧普通的函数改为异步函数调用都是一样
async/await 这两个可以把一些异步的操作改为同步的操作
通过 await 来调用一个 async 函数，那这个调用的外面再弄一个 async 这个函数就会进入死循环
剩下的不懂了
6.阅读本篇文章https://github.com/mqyqingfeng/Blog/issues/3	
 写出看懂和没看懂的地方。
作用域：就是代码定义变量的区域就是作用域。
作用域，有静态作用域和动态作用域
静态作用域，函数的作用域在函数定义的时候就决定了
动态作用域，函数的作用域是在函数调用的时候才决定的
剩下的不懂了
7.阅读本篇文章https://learnku.com/articles/50523，写出看懂和没看懂的地方。
静态作用域又叫做词法作用域
词法变量的作用域可以是一个函数可以是一段代码，该变量在这个代码区域内可见，在这个区域外是不可见的
动态作用域的变量叫做动态变量
执行定义的动态变量的代码段，在这段时间内，该变量会一直存在；在代码段执行结束，该变量才会消失
剩下的不懂了