1.用解构赋值的方式将 PageIndex,PageSize,id,category,subject,format,changed解构出来
{
  "paramz": {
    "feeds": 
      [{
        "id": 299076,
        "category": "article",
        "data": {
          "subject": "荔枝新闻3.0：不止是阅读",
          "format": "txt",
          "changed": "2015-09-22 16:01:41"
        }
      }],
    "PageIndex": 1,
    "PageSize": 20
  }
}

const {
    paramz: {
        PageIndex: PageIndex: 
        PageSize: PageSize: 
        feeds: [
            {
                id: id
                category: category: 
                data: {
                    subject: subject: 
                    format: format: 
                    changed: changed: 
                }
            }
        ]
    }
} = {
    "paramz": {
        "feeds":
            [{
                "id": 299076,
                "category": "article",
                "data": {
                    "subject": "荔枝新闻3.0：不止是阅读",
                    "format": "txt",
                    "changed": "2015-09-22 16:01:41"
                }
            }],
        "PageIndex": 1,
        "PageSize": 20
    }
}
console.log( PageIndex,PageSize,id,category,subject,format,changed)
2.
//获取用户
function getUser(id) {
    return Promise.resolve(id + 1);
}

//根据用户获取角色
function getRoleByUser(id) {
    return Promise.resolve(id + 1);
}

//根据角色获取权限
function getRightsByRole(id) {
    return Promise.resolve(id + 1);
}

function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });
}
//改为同步的方式执行
async function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });

    var aa = await getUser(1);
    var bb = await getRoleByUser(c)
    var cc = await getRightsByRole(d);

    console.log(aa, bb, cc)
}
ab()
3.
function Number(length) {
    this.length = length;
}

Numbe.prototype.push = function(arr) {

}

Numbe.prototype.pop = function() {

}

Numbe.isNumber = function(arr) {

}

//转换为class的方式
class Number{
	constructor(length){
	   this.length = length;
	}
	push(arr){}
	pop(){}
	static isNumber(arr){}
}

5.阅读本篇文章https://segmentfault.com/a/1190000007535316，写出看懂和没看懂的地方。
看懂：async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 
async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成
直接调用 async 函数  返回一个Promise 
Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返
回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。
 await  ，它等的实际是一个返回值 ，它可以等任意表达式的结果 await 后面实际是可以接普通函数调用或者直接量的
阻塞后面的代码  可以做同步

6.阅读本篇文章https://github.com/mqyqingfeng/Blog/issues/3	 写出看懂和没看懂的地方。
看懂：JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作
用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。

7.阅读本篇文章https://learnku.com/articles/50523，写出看懂和没看懂的地方。
看懂：静态作用域又叫做词法作用域，采用词法作用域的变量叫词法变量
         C/C++ 、 C# 、 Python 、 Java 、 JavaScript …… 相反，采用动态作用域的变量叫做动态变量。
         词法作用域是在 ** 代码解析（定义）** 的时候确定的，关注的是函数在 ** 何处定义 **，并从定义处向上查找作用域。
        动态作用域是在 ** 代码运行 ** 的时候确定的，关注的是代码在 ** 何处调用 **，并从调用栈向上查找作用域。
        箭头函数的 this 并不指向调用他的对象，也不是指向调用他的对象的父作用域，而是指向他定义的位置的父作用域，不管
        你在哪里调用，都是同一个指向
