1.写出自己理解的原型和原型链
原型是个对象，有__proto__的属性，这个属性指向自身的原型
原型链是个函数，有prototype属性，

2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。// 2  1  
fn(){console.log(2);}
() { console.log(1);}
() {console.log(1);}

3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。// 1 1

4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
//1 1 

5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法

// 1
for(var i = 0 ; i <= 9 ; i++){
    console.log(i).
}
// 2
var i = 0 ;
for(i ; i< 10 ;i ++){
    console.log(i)
}
// 3
var i=0;
for(i;i<=9;i++){
    console.log(i);
}

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
/^\w{6,15}$/

7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
console.log(c1)
        console.log(c1.prototype === undefined) 
        console.log(c1.__proto__ === C.prototype)
        console.log(c1.__proto__.prototype === undefined)
        console.log(c1.__proto__.__proto__ === B.prototype)
        console.log(c1.__proto__.__proto__.__proto__ === A.prototype)
        console.log(c1.__proto__.constructor === C.prototype.constructor)
        console.log(c1.__proto__.constructor.prototype === C.prototype)
        console.log(c1.__proto__.constructor.prototype.constructor === C.prototype.constructor)
        console.log(C.prototype.constructor === c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.constructor.prototype === c1.__proto__.constructor.prototype)
        console.log(C.prototype.constructor.prototype.constructor ===c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.__proto__ === B.prototype)