1.用解构赋值的方式将 PageIndex, PageSize, id, category, subject, format, changed结构出来
    {
        "paramz": {
            "feeds":
            {
                "id": 299076,
                    "category": "article",
                        "data": {
                    "subject": "荔枝新闻3.0：不止是阅读",
                        "format": "txt",
                            "changed": "2015-09-22 16:01:41"
                }
            },
            "PageIndex": 1,
                "PageSize": 20
        }
    }

    const {
        paramz: {
            PageIndex: fm,
            PageSize: size,
            feeds: {
                id: isid,
                category: go,
                data: {
                    subject: sub,
                    format: form,
                    changed: chang
                }
            }
        }
    } = {
        "paramz": {
            "feeds":
            {
                "id": 299076,
                "category": "article",
                "data": {
                    "subject": "荔枝新闻3.0：不止是阅读",
                    "format": "txt",
                    "changed": "2015-09-22 16:01:41"
                }
            },
            "PageIndex": 1,
            "PageSize": 20
        }
    }
    console.log(fm, size, isid, go, sub, form, chang)

    2.
    //获取用户
    function getUser(id) {
        return Promise.resolve(id + 1);
    }

    //根据用户获取角色
    function getRoleByUser(id) {
        return Promise.resolve(id + 1);
    }

    //根据角色获取权限
    function getRightsByRole(id) {
        return Promise.resolve(id + 1);
    }

    async function ab() {
        //先获取用户
        await getUser(1).then(c => {
            //根据用户ID获取角色
            await getRoleByUser(c).then(d => {
                //根据角色ID获取权限
                await getRightsByRole(d).then(c => {
                });
            });
        });
    }
    //改为同步的方式执行

    3.
    function Array(length) {
        this.length = length;
    }

    Array.prototype.push = function (arr) {

    }

    Array.prototype.pop = function () {

    }

    Array.isArray = function (arr) {

    }

    //转换为class的方式
    class Array {
        constructor(length) {
            this.length = length;
        }
        push(arr) { }
        pop() { }
        static isArray(arr) { }
    }
    4.来这里的学习的目的是什么？学习要达成？要达成目标的规划？
    出去后工作有自己理想的工资，早点成家，学习要达成看到各种BUG能轻易的解决完成，看到项目之后有清晰的思路能够独立完成，
    要达到这个目的的规划：基础知识的一定要学扎实学牢，编程技巧也要掌握，
    一定要熟练的掌握一到两种框架，另外在上课一定要认真听老师讲课，
    认真做笔记，碰到BUG细心找问题所在，不要心急，越急的话心态就容易崩溃，一定要放平心态，
    吸取老师、朋友、同学的各种学习方法，壮大自己，让自己成为最牛的前端工程师