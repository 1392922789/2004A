第六章
object创建实例的方式：
1.使用new操作符和object构造函数
let a = new Object();a.name = "admin";a.age  = "24";
2.使用对象字面量表示法(更倾向于这种方法)
let b = { name:"admin",age:"24"};
Array创建实例的方法
1.使用array构造函数
let a = new Array(20);传入20这个数值代码会创建一个初始length为20的数组
也可以创建一个包含几个字符串的数组只要在括号里写几个字符串就可以
new操作符是可以省略的
2.使用数组字面量
let colors = ["red", "blue", "green"]; // 创建一个包含3个元素的数组
let names = []; // 创建一个空数组
let values = [1,2,]; // 创建一个包含2个元素的数组
与对象一样，在使用数组字面量表示法创建数组不会调用Array 构造函数。
es6新增用于创建数组的静态方法：from()和of() from() 用于将类数组结构转换为数组实例，而of() 用于将一组参数转换为数组实例
Array.from() 的第一个参数是一个类数组对象，即任何可迭代的结构，或者有一个 length 属性和可索引元素的结构。
console.log(Array.from("Matt")); // ["M", "a", "t", "t"]
Array.from() 还接收第二个可选的映射函数参数。这个函数可以
直接增强新数组的值，而无须像调用 Array.from().map() 那样先创
建一个中间数组。还可以接收第三个可选参数，用于指定映射函数中
this 的值。但这个重写的 this 值在箭头函数中不适用。
Array.of() 可以把一组参数转换为数组。这个方法用于替代在ES6
之前常用的 Array.prototype.slice.call(arguments) ，一种异
常笨拙的将 arguments 对象转换为数组的写法：
console.log(Array.of(1, 2, 3, 4)); // [1, 2, 3, 4] console.log(Array.of(undefined)); // [undefined]
数组空位
const options = [,,,,,]; // 创建包含5个元素的数组
console.log(options.length); // 5
console.log(options);// [,,,,,]
ES6新增方法普遍将这些空位当成存在的元素，只不过值为undefined
数组索引：
let colors = ["red", "blue", "green"]; // 定义一个字符串数组
alert(colors[0]); // 显示第一项
colors[2] = "black"; // 修改第三项
colors[3] = "brown"; // 添加第四项
数组的length属性不只是读的还可以修改
let colors = ["red", "blue", "green"]; // 创建一个包含3个字符串的数组
colors.length = 2; 
alert(colors[2]); // undefined
检测数组：
使用instanceof操作符
迭代器方法
在ES6中， Array 的原型上暴露了3个用于检索数组内容的方法：
keys() 、 values() 和 entries() 。 keys() 返回数组索引的迭
代器， values() 返回数组元素的迭代器，而 entries() 返回索引/值
对的迭代器
复制和填充方法
批量复制方法 fill()
填充数组方法copyWithin()
转换方法：
let colors = ["red", "blue", "green"]; // 创建一个包含
3个字符串的数组
alert(colors.toString()); // red,blue,green 
alert(colors.valueOf()); // red,blue,green 
alert(colors); // red,blue,green
栈方法：
let colors = new Array(); // 创建一个
数组
let count = colors.push("red", "green"); // 推入两项
alert(count); // 2
count = colors.push("black"); // 再推入一项
alert(count); // 3 
let item = colors.pop(); // 取得最后一项
alert(item); // black 
alert(colors.length); // 2
队列方法：
let colors = new Array(); // 创建一个
数组
let count = colors.push("red", "green"); // 推入两项
alert(count); // 2 
count = colors.push("black"); // 再推入一项
alert(count); // 3 
let item = colors.shift(); // 取得第一项
alert(item); // red 
alert(colors.length); // 2
unshift()头部添加
排序方法：
reverse()反向排列
sort()让最小的值在前面依次拍好

set：Set是一个无法添加重复值的集合。
创建：const m = new Set();
const s1 = new Set(["val1", "val2", "val3"]);	// 使用数组初始化集合
console.log(s1.size);		// 3,长度访问跟数组的length不一样
s1.add("Matt").add("Frisbie");	//可以链式添加
s1.has('Matt');	// true，是否存在指定的项
console.log(s1);	// Set(5) {"val1", "val2", "val3", "Matt", "Frisbie"}
s1.add("Matt");
console.log(s1);	// Set(5) {"val1", "val2", "val3", "Matt", "Frisbie"}，无法添加重复项

let deleted = s1.delete('Matt');	// delete方法返回删除结果
console.log(deleted);   // true
console.log(s1);    // Set(4) {"val1", "val2", "val3", "Frisbie"}

deleted = s1.delete('Matt');
console.log(deleted);   // false，无法重复删除

//可通过for of访问每个项
for (let item of s1) {
    console.log(item);
}
//val1 val2  val3 Frisbie

//也可通过forEach方法访问
s1.forEach(item => console.log(item));

去重：let numbers = [1, 2, 3, 5, 6, 1, 2, 3];
numbers = Array.from(new Set(numbers));
console.log(numbers);   // [1, 2, 3, 5, 6]

