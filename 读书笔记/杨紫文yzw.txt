JScript



1.JavaScript是一门用来与网页交互的脚本语言,它由三部分组成，分别是：
a:ECMAScript,b:文档对象模型（DOM）c:浏览器对象模型（BOM）


2.使用script的方式：嵌入行内样式，直接在script中写入。	
注：代码中不能出现字符串，否则就会报错。
浏览器解析行内脚本时看到script会把它当成结束标签，需要转义字符”\“，这样代码就会被完全解析不会出错。

标签占位符

在过去所有的script元素都放在head标签内，这样回导致页面渲染延迟，因为把所有JavaScript文件都放在 <head> 里，也就意味着必须把所有的JavaScript代码都下载、解析和解释完成后，才能开始渲染页面。


行内代码与外部文件

推荐使用外部文件
原因：1可维护性，如果代码存放在多个html页面中，维护起来会很麻烦，如果把他都保存在一个JavaScript文件中，维护起来就方便多了‘
2：缓存  让页面加载更快
3.适应未来



语法


区分大小写

例：test和Test时两个不同的变量。typeof不能作为函数名，但是Typeof可以时有效的函数名

标识符
变量、函数、属性或函数参数的名称。字母下划线美元符号$


关键字和保留字

关键字不能作为标识符或者属性名字。比如：bread,case,do,new,return,class等。。。

保留字
留给将来做关键字用的。


变量

变量时松散型的，变量可以保存任何类型的数据，var const let 可以声明变量。但是var 可以在任何版本中使用，const和let只能在ECMAScript 6或者更晚的版本中使用。

var 声明作用域
 var 操作符定义的变量会成为包含它的函数的局部变量

var声明提升
声明的变量会自动提升到函数作用域顶部

let声明
let 和var的区别
let 声明的时跨级作用域，var声名的时函数作用域

let声明的变量不会在作用域中被提升。在let声明之前执行被称为暂时性死区

let 在全绝作用域中声明的变量不会成为window对象的属性。

cons声明：const的行为与let基本相同，它声明变量时必须同时初始化变量。const 声明的限制只适用于它指向的变量的引用


数据类型：
Undefined 、 Null 、 Boolean 、 Number 、 String,Symbol

typeof 操作符
 typeof 操作符会返回下列字符串之一：
"undefined" 未定义；用 var 或 let 声明了变量但没有初始化
"boolean" 布尔类型；有两个字面值： true 和 false
"string" 字符串；  可以使用双引号，单引号，反引号标示
"number"数值；
"object" 对象；创建自己的对象，然后再给对象添加属性和方法
"symbol" 符号。函数不能用作构造函数，与new关键字一起使用

NAN，本来要返回数值的操作失败了

数值转换
非数值转换为数值： Number() 、parseInt() 和 parseFloat()

转换为字符串： toString() String()

操作符
++ -- || +=  -= ><  >= <=   （相等）==  （全等）===  (赋值)=  !=

布尔操作符
 逻辑非
逻辑与
逻辑或

函数
函数是核心组件，它封装语句，在任何地方任何时间执行。
严格模式对函数也有一些限制：
1.函数不能以 eval 或 arguments 作为名称；
2.函数的参数不能叫 eval 或 arguments ；
3.两个函数的参数不能叫同一个名称


原始值和引用值
原始值：最简单的数据。引用值：由多个值构成的对象

在把一个值赋给变量时，JavaScript引擎必须确定这个值是原始值还是引用值

6种原始值： Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。
在操作对象时，实际上操作的是对该对象的引用（reference）而非实
际的对象本身。为此，保存引用值的变量是按引用（by reference）访
问的。



确定类型：1.typeof 操作符最适合用来判断一个变量是否为原始类型。typeof 虽然对原始值很有用，但它对引用值的用处不大。
2.instanceof	判断 new 关键字创建的引用数据类型
不考虑 null 和 undefined（这两个比较特殊）以对象字面量创建的基本数据类型

3.constructor  constructor  似乎完全可以应对基本数据类型和引用数据类型 但如果声明了一个构造函数，并且把他的原型指向了 Array 的原型，所以这种情况下，constructor 也显得力不从心
4.Object.prototype.toString.call()	完美的解决方案


变量声明
1.使用var，var 声明会被拿到函数或全局作用域的顶部，位于作用域中所
有代码之前。这个现象叫作“提升”（hoisting）
2. 使用 let 的块级作用域声明
ES6新增的 let 关键字跟 var 很相似，但它的作用域是块级
的，这也是JavaScript中的新概念。块级作用域由最近的一对包含
花括号 {} 。， if 块、 while 块、 function
块，连单独的块也是 let 声明变量的作用域。
let 与 var 的另一个不同之处是在同一作用域内不能声明两
次。重复的 var 声明会被忽略，而重复的 let 声明会抛出
SyntaxError
3. 使用 const 的常量声明
除了 let ，ES6同时还增加了 const 关键字。使用 const 声
明的变量必须同时初始化为某个值。一经声明，在其生命周期的
任何时候都不能再重新赋予新值。



5.0

基本引用类型

引用类型：引用类型有时候也被称为对象定义，因为它们描述了自己的对象应有的属性和方法。

注：注意 引用类型虽然有点像类，但跟类并不是一个概念。
对象被认为是某个特定引用类型的实例。新对象通过使用 new 操作符
后跟一个构造函数（constructor）来创建。比如：let now = new Date();


一：
Date：
1.Date 类型可以精确表示1970年1月 1日之前及之后285 616年的日期。
要创建日期对象，就使用 new 操作符来调用 Date 构造函数：let now = new Date();

在不给 Date 构造函数传参数的情况下，创建的对象将保存当前日期
和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示
。ECMAScript为此提供了两个辅助方法： Date.parse() 和 Date.UTC() 。
比如，要创建一个表示“2019年5月23日”的日期对象，可以使用以下代码
let someDate = new Date(Date.parse("May 23, 2019"));

2.继承的方法
与其他类型一样， Date 类型重写了 toLocaleString() 、toString() 和 valueOf() 方法。
3.日期格式化方法
Date 类型有几个专门用于格式化日期的方法，它们都会返回字符串：toDateString() 显示日期中的周几、月、日、年（格式特定于实
现）；
toTimeString() 显示日期中的时、分、秒和时区（格式特定于实
现）；
toLocaleDateString() 显示日期中的周几、月、日、年（格式特
定于实现和地区）；
toLocaleTimeString() 显示日期中的时、分、秒（格式特定于实
现）；
toUTCString() 显示完整的UTC日期（格式特定于实现）
4.
日期/时间组件方法

 日期格式化方法


Date 类型有几个专门用于格式化日期的方法，它们都会返回字符


串：


toDateString() 显示日期中的周几、月、日、年






toTimeString() 显示日期中的时、分、秒和时区


toLocaleDateString() 显示日期中的周几、月、日、年


toLocaleTimeString() 显示日期中的时、分、秒


toUTCString() 显示完整的UTC日期


日期/时间组件方法


Date 类型剩下的方法（见下表）直接涉及取得或设置日期值的特定


部分


getTime()返回日期的毫秒


setTime(milliseconds)设置日期的毫秒表示，从而修改设置日期的毫秒数


getFullYear() 返回4位数


getUTCFullYear()返回UTC日期 的4位数


setFullYear(year)设置日期的年（ year 必须是4位数）






setUTCFullYear(year)设置UTC日期的年（ year 必须 是4位数）


getMonth()返回日期的月（0表示1月，11表示12月）


getUTCMonth()返回UTC日期的月（0表示1月，11表示12月）


setMonth(month)设置日期的月（ month 为大于0的数值，大于11加年）


setUTCMonth(month)设置UTC日期的月（ month 为大于0的数值，大于11加年）






getDate()返回日期中的日（1~31）


getUTCDate()返回UTC日期中的日（1~31）


setDate(date)设置日期中的日（如果 date 大于该月天数，则加月）


setUTCDate(date)设置UTC日期中的日（如果date 大于该月天数，则加月）


getDay()返回日期中表示周几的数值（0表示周日，6表示周六）


getUTCDay()返回UTC日期中表示周几的数值（0表示周日，6表示周六）


getHours()返回日期中的时（0~23）


getUTCHours()返回UTC日期中的时（0~23）


setHours(hours)设置日期中的时（如果 hours大于23，则加日）


setUTCHours(hours)设置UTC日期中的时（如果


hours 大于23，则加日）


getMinutes()返回日期中的分（0~59）


getUTCMinutes()返回UTC日期中的分（0~59）


setMinutes(minutes)设置日期中的分（如果


minutes 大于59，则加时）


setUTCMinutes(minutes)设置UTC日期中的分（如果minutes 大于59，则加时）


getSeconds()返回日期中的秒（0~59）


getUTCSeconds()返回UTC日期中的秒（0~59）


setSeconds(seconds)设置日期中的秒（如果seconds 大于59，则加分）


setUTCSeconds(seconds)设置UTC日期中的秒（如果seconds 大于59，则加分）


getMilliseconds()返回日期中的毫秒


getUTCMilliseconds()返回UTC日期中的毫秒


setMilliseconds(milliseconds)设置日期中的毫秒


setUTCMilliseconds(milliseconds)设置中的毫秒 UTC日期






getTimezoneOffset()返回以分钟计的UTC与本地时区的偏移量（如美国EST即“东部标准时间”返回300，进


入夏令时的地区可能有所差异）


RegExp


ECMAScript通过 RegExp 类型支持正则表达式。正则表达式使用类似


Perl的简洁语法来创建：


let expression = /pattern/flags;


g ：全局模式


i ：不区分大小写


m ：多行模式


y ：粘附模式


u ：Unicode模式


s ： dotAll 模式






 RegExp 实例属性


每个 RegExp 实例都有下列属性


global ：布尔值，表示是否设置了 g 标记


ignoreCase ：布尔值，表示是否设置了 i 标记


unicode ：布尔值，表示是否设置了 u 标记。


sticky ：布尔值，表示是否设置了 y 标记。


lastIndex ：整数表示在源字符串中下一次搜索的开始位置，始终从0开始


multiline ：布尔值，表示是否设置了 m 标记。


dotAll ：布尔值，表示是否设置了 s 标记


source ：正则表达式的字面量字符串没有凯头和结尾的斜杠


flags ：正则表达式的标记字符串


RegExp 实例方法


RegExp 实例的主要方法是 exec() ，主要用于配合捕获组使用。这


个方法只接收一个参数，即要应用模式的字符串


例：
let text = "mom and dad and baby";


let pattern = /mom( and dad( and baby)?)?/gi;


let matches = pattern.exec(text);


console.log(matches.index); // 0


console.log(matches.input); // "mom and dad and


baby"console.log(matches[0]); // "mom and dad and


baby"


console.log(matches[1]); // " and dad and baby"


console.log(matches[2]); // " and baby"


 RegExp 构造函数属性


RegExp 构造函数本身也有几个属性。


这些属性适用于作用域中的所有正则表达式，而且会根据


最后执行的正则表达式操作而变化。这些属性还有一个特点，就是可以通过


两种不同的方式访问它们。


模式局限


虽然ECMAScript对正则表达式的支持有了长足的进步，但仍然缺少Perl


语言中的一些高级特性


\A 和 \Z 锚（分别匹配字符串的开始和末尾）联合及交叉类原子组


x （忽略空格）匹配模式条件式匹配正则表达式注释


 原始值包装类型


为了方便操作原始值，ECMAScript提供了3种特殊的引用类型：


Boolean 、 Number 和 String


例：
let s1 = "some text";


let s2 = s1.substring(2);


s1 是一个包含字符串的变量，它是一个原始值。第二行紧接


着在 s1 上调用了 substring() 方法，并把结果保存在 s2 中


(1) 创建一个 String 类型的实例；


(2) 调用实例上的特定方法；


(3) 销毁实例


let s1 = new String("some text");


let s2 = s1.substring(2);


s1 = null;








 Boolean


Boolean 是对应布尔值的引用类型要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入 true 或 false


例如let booleanObject = new Boolean(true);


Boolean 的实例会重写 valueOf() 方法，返回一个原始值 true


或 false 。


 Number


Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值，如下例所示：


let numberObject = new Number(10);


与 Boolean 类型一样， Number 类型重写了 valueOf() 、toLocaleString() 和 toString() 方法。


String


String 是对应字符串的引用类型。要创建一个 String 对象，使


用 String 构造函数并传入一个数值，如下例所示：


let stringObject = new String("hello world");


String 对象的方法可以在所有字符串原始值上调用。3个继承的方


法 valueOf() 、 toLcaleString() 和 toString() 都返回对象的原


始字符串值。


每个 String 对象都有一个 length 属性，表示字符串中字符的数


量。


String 类型提供了很多方法来解析和操作字符串。


1. JavaScript字符 
JavaScript字符串由16位码元（code unit）组成。

2. normalize() 方法


些Unicode字符可以有多种编码方式。有的字符既可以通过一个BMP


字符表示，也可以通过一个代理对表示


 
比如：

// U+00C5：上面带圆圈的大写拉丁字母A

console.log(String.fromCharCode(0x00C5));
// Å


// U+212B：长度单位“埃”


console.log(String.fromCharCode(0x212B));
// Å


// U+004：大写拉丁字母A


// U+030A：上面加个圆圈


console.log(String.fromCharCode(0x0041, 0x030A));


// Å


 
3. 字符串操作方法


 
concat() ，用于将一个


或多个字符串拼接成一个新字符串。


 
例：


let stringValue = "hello ";


let result = stringValue.concat("world");


console.log(result);



第六章

6.1Object

Object 适合存储和在程序间交换数据
Object实例的创建方式：
1.new Object.
2.字面量方式创建：let person = { name: "Nicholas", age: 29 };

倾向于对象字面量，以原因：代码更少

6.2Array
6.2.1创建数组
1.new Array()
如果知道数组中元素的数量，那么可以给构造函数传入一个数值:new Array(20)
也可以给 Array 构造函数传入要保存的元素： new Array("red", "blue", "green")

2.使用数组字面量

Array 构造函数还有两个ES6新增的用于创建数组的静态方法：
1.Array.from()  例：console.log(Array.from("Matt"))
2.Array.of() 可以把一组参数转换为数组。

6.2.2数组空位
例：
const options = [,,,,,]; // 创建包含5个元素的数组
console.log(options.length); // 5

6.2.3
数组索引
let colors = ["red", "blue", "green"]; // 定义一个字
符串数组
alert(colors[0]); // 显示第一项
colors[2] = "black"; // 修改第三项
colors[3] = "brown";


6.2.4检测数组
instanceof操作符
6.2.5 迭代器方法
 Array 的原型上暴露了3个用于检索数组内容的方法：
keys() 、 values() 和 entries() 。 keys() 返回数组索引的迭
代器， values() 返回数组元素的迭代器，而 entries() 返回索引/值
对的迭代器
例：
const a = ["foo", "bar", "baz", "qux"]; // 因为这些方法都返回迭代器，所以可以将它们的内容
// 通过Array.from()直接转换为数组实例
const aKeys = Array.from(a.keys()); 
const aValues = Array.from(a.values());
 const aEntries = Array.from(a.entries()); 
console.log(aKeys); // [0, 1, 2, 3] console.log(aValues); 
// ["foo", "bar", "baz", "qux"] 
console.log(aEntries); // [[0, "foo"], [1, "bar"],
[2, "baz"], [3, "qux"]]


6.2.6 复制和填充方法 fill()
例：const zeroes = [0, 0, 0, 0, 0]; // 用5填充整个数组
zeroes.fill(5); 
console.log(zeroes); // [5, 5, 5, 5, 5] 
zeroes.fill(0); // 重置


6.2.7 转换方法
 toLocaleString() , toString()

都返回数组值的逗号分隔的字符串。如果想使用不同的分隔符，则可以使用 join() 方法
例：
let colors = ["red", "green", "blue"]; 
alert(colors.join(",")); // red,green,
blue alert(colors.join("||")); // red||green||blue



6.2.10排序方法   reverse() 和sort() 
 reverse()：反向排列
例：
let values = [1, 2, 3, 4, 5]; 
values.reverse(); alert(values); // 5,4,3,2,1
sort: sort() 会按照升序重新排列数组元素，即最小的值在前面，最大的值在后面。
例：
let values = [0, 1, 5, 10, 15];
 values.sort(); alert(values); // 0,1,10,15,5

6.2.11 操作方法
1.concat() 会把这些数组的每一项
都添加到结果数组。如果参数不是数组，则直接把它们添加到结果数组末
尾。
例：
let colors = ["red", "green", "blue"]; 
let colors2 = colors.concat("yellow", ["black", "brown"]);
 console.log(colors); // ["red", "green","blue"]
console.log(colors2); // ["red", "green", "blue",
"yellow", "black", "brown"]

2.slice()

例：let colors = ["red", "green", "blue", "yellow", "purple"]; 
let colors2 = colors.slice(1); 
let colors3 = colors.slice(1, 4);
alert(colors2); // green,blue,yellow,purple
alert(colors3); // green,blue,yellow
3. 删除：splice() 传2个参数：要删除的第一个元素的位置和要删除的元素数量。
4.插入：需要给 splice() 传3个参数：开始位置、0（要删除的元素数量）和要插入的元素，
5.替换：开始位置、要删除元素的数量和要插入的任意多个元素。例：
splice(2, 1, "red", "green") 会在位置2删除一个元素，然后从该位置开始向数组中插入 "red" 和 "green" 。

6.2.12 搜索和位置方
1.
indexOf() 、lastIndexOf() 和 includes() 。
indexOf() 和 includes() 方法从数组前头（第一项）开始向后搜索，而
lastIndexOf() 从数组末尾（最后一项）开始向前搜索。
例：
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; 
alert(numbers.indexOf(4)); // 3 
alert(numbers.lastIndexOf(4)); // 5
alert(numbers.includes(4)); // true
alert(numbers.indexOf(4, 4)); // 5 
alert(numbers.lastIndexOf(4, 4)); // 3 
alert(numbers.includes(4, 7)); // false
2.
 断言函数find() 和 findIndex()这两个方法都从
数组的最小索引开始。 find() 返回第一个匹配的元素，
findIndex() 返回第一个匹配元素的索引。


6.2.13 迭代方法

every() ：对数组每一项都运行传入的函数，如果对每一项函数都
返回 true ，则这个方法返回 true 。 filter() ：对数组每一项都运行传入的函数，函数返回 true 的
项会组成数组之后返回。
forEach() ：对数组每一项都运行传入的函数，没有返回值。
map() ：对数组每一项都运行传入的函数，返回由每次函数调用的
结果构成的数组。 
some() ：对数组每一项都运行传入的函数，如果有一项函数返回
true ，则这个方法返回 true


归并方法reduce() 和reduceRight() 。reduce() 方法从数组第一项开始遍历到最后一项。而 reduceRight() 从最后一项开始遍历至第一项



