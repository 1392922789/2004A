JScript



1.JavaScript是一门用来与网页交互的脚本语言,它由三部分组成，分别是：
a:ECMAScript,b:文档对象模型（DOM）c:浏览器对象模型（BOM）


2.使用script的方式：嵌入行内样式，直接在script中写入。	
注：代码中不能出现字符串，否则就会报错。
浏览器解析行内脚本时看到script会把它当成结束标签，需要转义字符”\“，这样代码就会被完全解析不会出错。

标签占位符

在过去所有的script元素都放在head标签内，这样回导致页面渲染延迟，因为把所有JavaScript文件都放在 <head> 里，也就意味着必须把所有的JavaScript代码都下载、解析和解释完成后，才能开始渲染页面。


行内代码与外部文件

推荐使用外部文件
原因：1可维护性，如果代码存放在多个html页面中，维护起来会很麻烦，如果把他都保存在一个JavaScript文件中，维护起来就方便多了‘
2：缓存  让页面加载更快
3.适应未来



语法


区分大小写

例：test和Test时两个不同的变量。typeof不能作为函数名，但是Typeof可以时有效的函数名

标识符
变量、函数、属性或函数参数的名称。字母下划线美元符号$


关键字和保留字

关键字不能作为标识符或者属性名字。比如：bread,case,do,new,return,class等。。。

保留字
留给将来做关键字用的。


变量

变量时松散型的，变量可以保存任何类型的数据，var const let 可以声明变量。但是var 可以在任何版本中使用，const和let只能在ECMAScript 6或者更晚的版本中使用。

var 声明作用域
 var 操作符定义的变量会成为包含它的函数的局部变量

var声明提升
声明的变量会自动提升到函数作用域顶部

let声明
let 和var的区别
let 声明的时跨级作用域，var声名的时函数作用域

let声明的变量不会在作用域中被提升。在let声明之前执行被称为暂时性死区

let 在全绝作用域中声明的变量不会成为window对象的属性。

cons声明：const的行为与let基本相同，它声明变量时必须同时初始化变量。const 声明的限制只适用于它指向的变量的引用


数据类型：
Undefined 、 Null 、 Boolean 、 Number 、 String,Symbol

typeof 操作符
 typeof 操作符会返回下列字符串之一：
"undefined" 未定义；用 var 或 let 声明了变量但没有初始化
"boolean" 布尔类型；有两个字面值： true 和 false
"string" 字符串；  可以使用双引号，单引号，反引号标示
"number"数值；
"object" 对象；创建自己的对象，然后再给对象添加属性和方法
"symbol" 符号。函数不能用作构造函数，与new关键字一起使用

NAN，本来要返回数值的操作失败了

数值转换
非数值转换为数值： Number() 、parseInt() 和 parseFloat()

转换为字符串： toString() String()

操作符
++ -- || +=  -= ><  >= <=   （相等）==  （全等）===  (赋值)=  !=

布尔操作符
 逻辑非
逻辑与
逻辑或

函数
函数是核心组件，它封装语句，在任何地方任何时间执行。
严格模式对函数也有一些限制：
1.函数不能以 eval 或 arguments 作为名称；
2.函数的参数不能叫 eval 或 arguments ；
3.两个函数的参数不能叫同一个名称


原始值和引用值
原始值：最简单的数据。引用值：由多个值构成的对象

在把一个值赋给变量时，JavaScript引擎必须确定这个值是原始值还是引用值

6种原始值： Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。
在操作对象时，实际上操作的是对该对象的引用（reference）而非实
际的对象本身。为此，保存引用值的变量是按引用（by reference）访
问的。



确定类型：1.typeof 操作符最适合用来判断一个变量是否为原始类型。typeof 虽然对原始值很有用，但它对引用值的用处不大。
2.instanceof	判断 new 关键字创建的引用数据类型
不考虑 null 和 undefined（这两个比较特殊）以对象字面量创建的基本数据类型

3.constructor  constructor  似乎完全可以应对基本数据类型和引用数据类型 但如果声明了一个构造函数，并且把他的原型指向了 Array 的原型，所以这种情况下，constructor 也显得力不从心
4.Object.prototype.toString.call()	完美的解决方案


变量声明
1.使用var，var 声明会被拿到函数或全局作用域的顶部，位于作用域中所
有代码之前。这个现象叫作“提升”（hoisting）
2. 使用 let 的块级作用域声明
ES6新增的 let 关键字跟 var 很相似，但它的作用域是块级
的，这也是JavaScript中的新概念。块级作用域由最近的一对包含
花括号 {} 。， if 块、 while 块、 function
块，连单独的块也是 let 声明变量的作用域。
let 与 var 的另一个不同之处是在同一作用域内不能声明两
次。重复的 var 声明会被忽略，而重复的 let 声明会抛出
SyntaxError
3. 使用 const 的常量声明
除了 let ，ES6同时还增加了 const 关键字。使用 const 声
明的变量必须同时初始化为某个值。一经声明，在其生命周期的
任何时候都不能再重新赋予新值。



