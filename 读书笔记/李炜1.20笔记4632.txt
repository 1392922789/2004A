# JavaScript

JavaScript他是是一门用来与网页交互的脚本语言核心(ECMAScript)  由ECMA-262定义并提供核心功能 文档对象模型(DOM) 提供与网页内容交互的方法和接口浏览器对象模型(BOM) 提供与浏览器交互的方法和接口JavaScript的这三个部分得到了五大Web浏览器，IE、Firefox、Chrome、Safari和Opera，不同程度的支持。所有浏览器基本上对ES5（ECMAScript 5）提供了完善的支持，而对ES6（ECMAScript 6） 和ES7（ECMAScript 7）的支持度也在不断提升。这些浏览器对DOM的支持各不相同，但对Level 3的支持日益趋于规范。HTML5中收录的BOM会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性

JavaScript插入HTML的主要方法是使用 <script> 元素。这个元素是由网景公司创造出来，最早在Netscape Navigator 2中实现
的。后来，这个元素被正式加入到HTML规范。 <script> 元素有下列8个属性。
1、async 立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效
2、charset 使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。
3、crossorigin 配置相关请求的CORS 跨源资源共享 设置。默认不使用CORS
4、defer 表示在文档解析和显示完成后再执行脚本是没有问题的。只对外部脚本件有效
5、integrity 允许比对接收到的资源和指定的加密签名以验证子资源完整性如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络
6、language 废弃。最初用于表示代码块中的脚本语言
7、src 包含要执行的代码的外部文件。
8、type 代替 language ，表示代码块中脚本语言的内容类型（也称MIME类型）。按照惯例，这个值始终都是 "text/javascript" ，尽
管 "text/javascript" 和 "text/ecmascript" 都已经废弃了。JavaScript文件的MIME类型通常是 "application/x- javascript" ，不过给type属性这个值有可能导致脚本被忽略。在非IE的浏览器中有效的其他值还有行内代码与外部文件 可以直接在HTML文件中嵌入JavaScript代码，但通常认为最佳实践是尽可能将JavaScript代码放在外部文件中。不过这个最佳实践并不是明确的强制性规则可维护性。JavaScript代码如果分散到很多HTML页面，会导致维护困难。而用一个目录保存所有JavaScript文件，则更容易维护，这样开发者就可以独立的编辑代码。缓存。浏览器会根据特定的设置缓存所有外部链接的JavaScript文件，这意味着如果两个页面都用到同一个文件，则该文件只需下
载一次。这最终意味着页面加载更快。适应未来。通过把JavaScript放到外部文件中，就不必考虑用XHTML或前面提到的注释黑科技。包含外部JavaScript文件的语法在HTML和XHTML中是一样的

#### 1.2语言基础

1、区分大小写：ECMAScript中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写
2、标识符：字母，数字，下划线 ,$
3、注释 ： //单行注释  /**/ 多行注释
4、严格模式：ECMAScript 5增加了严格模式（strict mode）的概念。严格模式是
一种不同的JavaScript解析和执行模型，ECMAScript 3的一些不规范写
法在这种模式下会被处理，对于不安全的活动将抛出错误。要对整个
脚本启用严格模式，在脚本开头加上这一行
5、语句：省略分号意味着由解析器确定  在哪里结尾在结尾加分号  if 条件输出语句； 
6、变量 变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有3
个关键字可以声明变量： var 、 const 和 let
7、 do-while 语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次
8、while 语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此， while 循环体内的代码有可能不会执行
9、for 语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式
10、for-in 循环显示了BOM对象 window 的所有属性。每次执行循环，都会给变量 propName 赋予一个 window 对象
的属性作为值，直到 window 的所有属性都被枚举一遍。与 for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const
11、for-of 语句显示了一个包含4个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const
12、start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的典型应用场景是嵌套循环。
13、reak 和 continue 语句为执行循环代码提供了更严格的控制手段。其中， break 语句用于立即退出循环，强制执行循环后的下一条语句。而 continue 语句也用于立即退出循环，但会再次从循环顶部开始执行
14、with 语句的主要场景是针对一个对象反复操作，这时候将代码作用域设置为该对象能提供便利

#### 1.3函数 

函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript中的函数使用function 关键字声明，后跟一组参数，然后是函数体。
diff() 函数用于计算两个数值的差。如果第一个数值小于第二个，则用第二个减第一个；否则，就用第一个减第二个。代码中每个分支都有自己的 return 语句，返回正确的差值。
return 语句也可以不带返回值。这时候，函数会立即停止执行并返回 undefined 。这种用法最常用于提前终止函数执行，并不是为了返回值
严格模式对函数也有一些限制

函数不能以 eval 或 arguments 作为名称；
函数的参数不能叫 eval 或 arguments ；
两个函数的参数不能叫同一个名称。
如果违反上述规则，则会导致语法错误，代码也不会执行。

# 第五章

### 1.时间data:

创建方法let now = new Date();



toDateString() 显示日期中的周几、月、日、年（格式特定于实

现）；

toTimeString() 显示日期中的时、分、秒和时区（格式特定于实

现）；

toLocaleDateString() 显示日期中的周几、月、日、年（格式特

定于实现和地区）；

toLocaleTimeString() 显示日期中的时、分、秒（格式特定于实

现）；

toUTCString() 显示完整的UTC日期（格式特定于实现）





getTime()返回日期的毫秒表示；与valueOf() 相同

setTime(*milliseconds*)设置日期的毫秒表示，从而修改整个日期

getFullYear()返回4位数年（即2019而不是19） 

getUTCFullYear()返回UTC日期的4位数年

setFullYear(*year*)设置日期的年（ *year* 必须是4位数）

setUTCFullYear(*year*)设置UTC日期的年（ *year* 必须是4位数）

getMonth()返回日期的月（0表示1月，11表 示12月）

getUTCMonth()返回UTC日期的月（0表示1月，11表示12月）



setMonth(*month*)设置日期的月（ *month* 为大于0的数值，大于11加年）

setUTCMonth(*month*)设置UTC日期的月（ *month* 为大于0的数值，大于11加年）

getDate()返回日期中的日（1~31） 

getUTCDate()返回UTC日期中的日（1~31） 

setDate(*date*)设置日期中的日（如果 *date* 大于该月天数，则加月）

setUTCDate(*date*)设置UTC日期中的日（如果date大于该月天数，则加月）

getDay()返回日期中表示周几的数值（0表示周日，6表示周六）





getUTCDay()返回UTC日期中表示周几的数值（0表示周日，6表示周六）

getHours()返回日期中的时（0~23） 

getUTCHours()返回UTC日期中的时（0~23） 

setHours(*hours*)设置日期中的时（如果 *hours*大于23，则加日）

setUTCHours(*hours*)设置UTC日期中的时（如果hours大于23，则加日）

getMinutes()返回日期中的分（0~59） 

getUTCMinutes()返回UTC日期中的分（0~59） 

setMinutes(*minutes*)设置日期中的分（如果minutes 大于59，则加时）

setUTCMinutes(*minutes*)设置UTC日期中的分（如果minutes大于59，则加时）





getSeconds()返回日期中的秒（0~59） 

getUTCSeconds()返回UTC日期中的秒（0~59） 

setSeconds(*seconds*)设置日期中的秒（如果seconds 大于59，则加分）

setUTCSeconds(*seconds*)设置UTC日期中的秒（如果seconds 大于59，则加分）

getMilliseconds()返回日期中的毫秒

getUTCMilliseconds()返回UTC日期中的毫秒

setMilliseconds(*milliseconds*)设置日期中的毫秒

setUTCMilliseconds(*milliseconds*)设置中的毫秒 UTC日期

getTimezoneOffset()返回以分钟计的UTC与本地时区的偏移量（如美国EST即“东部标准时间”返回300，进入夏令时的地区可能有所差异）





# 第六章

## 1 Object

### 1.1 new操作符

``` js
let person = new Object(); 
person.name = "Nicholas"; 
person.age = 29;
```

### 1.2 对象字面量

对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。

``` js
let person = { 
    name: "Nicholas", 
    age: 29 
};
```

也可以使用字符串、数字、bool类型来定义。

``` js
let person = { 
    "name": "Nicholas", 
    "age": 29, 
    5: true,
	true: 123,
    false: 321
};
person[5];	//true
person[true];	//123
person[false];	//321
```

但要注意此类情况（后值覆盖前值）：

``` js
let person = { 
    "name": "Nicholas", 
    "age": 29, 
    5: true,
	true: 123,
    true: 555,
    name: 'jack'
};
// 最后person变为
{
    5: true, 
    name: "jack", 
    age: 29, 
    true: 555
}
```

**思考：**

``` js
let person = {
    5:15,
    true: 'yes',
    false: 'no'
};
person.5;	// ?
person.true;	// ?
person.false;	// ?

person.__proto__ === ?;
person.__proto__.constructor === ?;

let person = new Object();
person.__proto__ === ?;
person.__proto__.constructor === ?;
```

### 1.3 访问/设置方式

> **点语法**

``` js 
let person = { 
	"name": "Nicholas", 
	"age": 29, 
	5: true,
	true: 123
};
person.name;	//"Nicholas"
person.age;		//29
person.name = 'jack';
person.age = 30;
person.true;	//对吗？
person.5;	//对吗？
```

> **中括号**

``` js
let person = { 
	"name": "Nicholas", 
	"age": 29, 
	5: true,
	true: 123
};
person['name'];	//"Nicholas"
person['age'];		//29
person['name'] = 'jack';
person['age'] = 30;
person[true];	//对吗？
person[5];	//对吗？
```


**思考：可以这样定义吗？如果可以，那么怎么访问name属性值呢？**

``` js
let name = {
    firstName: '张',
    lastName: '三'
};
let person = {
    [name]: '张三'
}
```

## 2 Array

### 2.1 Array构造函数

``` js
let colors = new Array();	//表示创建一个空数组
colors.length;	//0

let colors = new Array(5);	//表示创建一个长度为5的空数组
colors.length;	//5
colors[0];	//undefined
let colors = Array(5); //不用new也可以

let colors = new Array("red", "blue", "green");	//表示创建一个数组，并传入三个值
colors.length;	//3
colors[0];	//"red"
let names = Array("Greg"); //不用new也可以
```

**思考：**

``` js
let colors = new Array(3);
colors[0];	//？
colors.length;	//？
```

### 2.2 数组字面量

``` js
let colors = ["red", "blue", "green"]; // 创建一个包含3个元素的数组
let names = []; // 创建一个空数组
let values = [1,2,]; // 创建一个包含2个元素的数组
let ages = [,,,];	//创建一个包含3个三个空元素的数组
colors.length = 2;	//改变数组长度
colors[2];	//undefined
```

**思考：**

``` js
let cars = [1,2,,,];
cars.length;	//?

let cats = [1,2,,,5];
cats.length;	//?
cats[cats.length - 1];	//?

let dogs = [1,2,3];
dogs.length = 5;
dogs.length;	//?
dogs[dogs.length - 1];	//?
```

### 2.3 Array.from

第一个参数是一个类数组对象，即任何可迭代的结构，或者有一个 length 属性和可索引元素的结构。

``` js
// 字符串会被拆分为单字符数组 
console.log(Array.from("Matt")); // ["M", "a", "t", "t"]

// 可以使用from()将集合和映射转换为一个新数组
const s = new Set().add(1).add(2).add(3).add(4);
console.log(Array.from(s)); // [1, 2, 3, 4]

// Array.from()对现有数组执行浅复制
const a1 = [1, 2, 3, 4]; 
const a2 = Array.from(a1);
console.log(a1); // [1, 2, 3, 4]
a1 === a2; // false
a2.push(5);
a1.length;	//?

// arguments对象可以被轻松地转换为数组
function getArgsArray() { 
    return Array.from(arguments); 
}
console.log(getArgsArray(1, 2, 3, 4)); // [1, 2, 3, 4]

// from()也能转换带有必要属性的自定义对象
const arrayLikeObject = { 0: 1, 1: 2, 2: 3, 3: 4, length: 4 };
console.log(Array.from(arrayLikeObject)); // [1, 2, 3, 4]

//没有length的对象不行，因为会将0,1,2,3当做对象的key，而不当做是下标
const arrayLikeObject = { 0: 1, 1: 2, 2: 3, 3: 4 };
console.log(Array.from(arrayLikeObject)); // []
```

**思考：**

``` js
const arrayLikeObject = { 3: 1, 1: 2, 2: 3, 0: 4,length:4 };	//下标打乱顺序
console.log(Array.from(arrayLikeObject)); //?

const arrayLikeObject = { 3: 1, 1: 2, 2: 3, 0: 4,length:6 };	//长度多了2
console.log(Array.from(arrayLikeObject)); //?

const arrayLikeObject = { 3: 1, 1: 2, 2: 3, 0: 4,length:2 };	//长度只有2
console.log(Array.from(arrayLikeObject)); //?

//转换一个没有length的对象
const arrayLikeObject = { a:1, b:2 };
console.log(Array.from(arrayLikeObject)); //?

//转换一个有length的对象
const arrayLikeObject = { a:1, b:2, length:3 };
console.log(Array.from(arrayLikeObject)); //?
```

### 2.4 Array.of

`Array.of() `可以把一组参数转换为数组。这个方法用于替代在ES6之前常用的`Array.prototype.slice.call(arguments)`。

``` js
console.log(Array.of(1, 2, 3, 4)); // [1, 2, 3, 4] 
console.log(Array.of(undefined)); // [undefined]
```

### 2.5 检测数组

``` js
[] instanceof Array;	// true
Array.isArray([]);	//true
```

思考：

``` js
(new Array() instanceof Array);	//?
(Array.isArray(new Array()));	//?
```

### 2.6 fill

使用`fill()`方法可以向一个已有的数组中插入全部或部分相同的值。开始索引用于指定开始填充的位置，它是可选的。如果不提供结束索引，则一直填充到数组末尾。

[^负值索引]: 负值索引从数组末尾开始计算，也可以将负索引想象成数组长度加上它得到的一个正索引。

``` js
const zeroes = [0, 0, 0, 0, 0]; // 用5填充整个数组
zeroes.fill(5);
console.log(zeroes); // [5, 5, 5, 5, 5]

// 用6填充索引大于等于3的元素
zeroes.fill(0); // 重置
zeroes.fill(6, 3); 
console.log(zeroes); // [0, 0, 0, 6, 6]

// 用7填充索引大于等于1且小于3的元素
zeroes.fill(0); // 重置
zeroes.fill(7, 1, 3);
console.log(zeroes); // [0, 7, 7, 0, 0];

// 用8填充索引大于等于1且小于4的元素
// (-4 + zeroes.length = 1)
// (-1 + zeroes.length = 4)
zeroes.fill(8, -4, -1); 
console.log(zeroes); // [0, 8, 8, 8, 0];
```

> **`fill()`静默忽略超出数组边界、零长度及方向相反的索引范围**

[^fill()]: 注解如下：

``` js
const zeroes = [0, 0, 0, 0, 0]; 
zeroes.fill(1, -10, -6);	// 索引过低，忽略
console.log(zeroes); // [0, 0, 0, 0, 0] 
zeroes.fill(1, 10, 15);		// 索引过高，忽略
console.log(zeroes);	// [0, 0, 0, 0, 0] 
zeroes.fill(2, 4, 2);	// 索引反向，忽略
console.log(zeroes); // [0, 0, 0, 0, 0]
zeroes.fill(4, 3, 10);	// 索引部分可用，填充可用部分 
console.log(zeroes); 	// [0, 0, 0, 4, 4]
```

**思考：**

``` js
const zeroes = [0, 0, 0, 0, 0]; 
zeroes.fill(1, -10, -1);
console.log(zeroes);	//?

const zeroes = [0, 0, 0, 0, 0]; 
zeroes.fill(1, -10, 20);
console.log(zeroes);	//?
```

### 2.7 copyWithin

`copyWithin()`会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与`fill()`使用同样的计算方法。

``` js
let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
// 从ints中复制索引0开始的内容，插入到索引5开始的位置
// 在源索引或目标索引到达数组边界时停止
ints.copyWithin(5); 
console.log(ints); // [0, 1, 2, 3, 4, 0, 1, 2, 3,4]

let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
// 从ints中复制索引5开始的内容，插入到索引0开始的位置
ints.copyWithin(0, 5); 
console.log(ints); // [5, 6, 7, 8, 9, 5, 6, 7, 8, 9]

let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
// 从ints中复制索引大于0并且小于3的内容
// 插入到索引4开始的位置
ints.copyWithin(4, 0, 3); 
console.log(ints); // [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]

let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
ints.copyWithin(2, 0, 6); 
console.log(ints); // [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]

// 支持负索引值，与fill()相对于数组末尾计算正向索引的过程是一样的
let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
ints.copyWithin(-4, -7, -3); 
console.log(ints); // [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]
```

> **静默忽略超出数组边界、零长度及方向相反的索引范围（同[^fill()]方法一样）**

### 2.8 reverse

严格意义上来讲，`reverse`不是排序方法，它只是数组颠倒方法，可以将数组的顺序颠倒过来。

``` js
// 书中的例子，只是作为反向排序讲解，不够全面
let values = [1, 2, 3, 4, 5]; 
values.reverse();
console.log(values); // [5,4,3,2,1]

let numbers = [5,1,2,6,3];
numbers.reverse();
console.log(numbers); // [3, 6, 2, 1, 5]

let chars = ['c','b','d','a','w'];
chars.reverse();
console.log(chars); // ["w", "a", "d", "b", "c"]

let objs = [{a:1}, {a:5}, {a:3}];
objs.reverse();
console.log(objs);	// [{a:3},{a:5},{a:1}]
```

### 2.9 sort

`sort()`方法可以接收一个比较函数，用于判断哪个值应该排在前面。比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值；如果两个参数相等，就返回0；如果第一个参数应该排在第二个参数后面，就返回正值。

``` js
let values = [0, 1, 5, 10, 15];
values.sort();	// 不传比较函数出来的结果是不正常的
console.log(values); // 0,1,10,15,5

let values = [15, 1, 10, 5, 0];
values.sort(function (value1, value2) {
    if (value1 < value2) {
        return -1;
    }
    else if (value1 > value2) {
        return 1;
    }
    return 0;
});
console.log(values); // 0,1,5,10,15

//使用箭头函数简写
let values = [15, 1, 10, 5, 0];
values.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
console.log(values); // 0,1,5,10,15

//最简单的方法
let values = [15, 1, 10, 5, 0];
values.sort((a, b) => a - b);
console.log(values); // 0,1,5,10,15
```

**思考：**

``` js
let values = [15, 1, 10, 5, 0];
//使用function的方式写一个反向排序方法

//使用箭头函数简写
let values = [15, 1, 10, 5, 0];
//使用箭头函数简写的方式写一个反向排序方法

//最简单的方法
let values = [15, 1, 10, 5, 0];
//使用最简单的方法写一个反向排序方法
```

### 2.10 concat

`concat()`方法可以在现有数组全部元素基础上创建一个新数组。它首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组。

``` js
let colors = ["red", "green", "blue"]; 
let colors2 = colors.concat("yellow", ["black", "brown"]); 
console.log(colors); // ["red", "green","blue"]
console.log(colors2); // ["red", "green", "blue", "yellow", "black", "brown"]

//不能添加第二层的数据
let colors = ["red", "green", "blue"]; 
let colors2 = colors.concat("yellow", ["black", "brown"],"aaa",["bbb",'ccc', ['a','b',['c']]]);
console.log(colors2);	//["red", "green", "blue", "yellow", "black", "brown", "aaa", "bbb", "ccc", Array(3)]
```

### 2.11 slice

`slice()`用于创建一个包含原有数组中一个或多个元素的新数组。`slice()`方法可以接收一个或两个参数：返回元素的开始索引和结束索引。如果只有一个参数，则 `slice()`会返回该索引到数组末尾的所有元素。如果有两个参数，则`slice()` 返回从开始索引到结束索引对应的所有元素，其中不包含结束索引对应的元素。

``` js
let colors = ["red", "green", "blue", "yellow", "purple"]; 
let colors2 = colors.slice(1); 
let colors3 = colors.slice(1, 4);
console.log(colors2);	// ["green", "blue", "yellow", "purple"
console.log(colors3);	// ["green", "blue", "yellow"]
console.log(colors);	// ["red", "green", "blue", "yellow", "purple"]
```

> - `slice()`的[^负值索引]跟`fill()`负值索引计算方式一样。
>
> - 静默忽略超出数组边界、零长度及方向相反的索引范围也跟[^fill()]方法的一样。

**思考：**

``` js
let numbers = [1,2,3,4,5];
console.log(numbers.slice(-5));		//?
console.log(numbers.slice(-5,-1));	//?
console.log(numbers.slice(-30));	//?
console.log(numbers.slice(-3,-5));	//?
```

### 2.12 splice

`splice()`是个非常强大的方法，可删除，替换，增加（**需非常熟悉**）。

- **删除**

  需要给 `splice()` 传2个参数：要删除的第一个元素的位置和要删除的元素数量。从原数组中删除任意多个元素，并返回一个数组，返回的数组包含删除的项。比如`splice(0, 2)` 会删除原数组前两个元素，并返回一个数组，数组中包含前两个已删除的项。

  ``` js
  let colors = ["red", "green", "blue"]; 
  let removed = colors.splice(0,1); // 删除第一项，并将第一项返回
  console.log(colors);	// ["green", "blue"]
  console.log(removed);	// ["red"]
  
  let colors = ["red", "green", "blue"]; 
  let removed = colors.splice(-3);
  console.log(colors);	// []
  console.log(removed);	// ["red", "green", "blue"]
  
  let colors = ["red", "green", "blue"]; 
  let removed = colors.splice(-3,2);
  console.log(colors);	// ["blue"]
  console.log(removed);	// ["red", "green"]
  ```

- **插入**

  需要给 `splice()` 传3个参数：开始位置、0（要删除的元素数量）和要插入的元素，可以在数组中指定的位置插入元素。第三个参数之后还可以传第四个、第五个参数，乃至任意多个要插入的元素。比如，`splice(2, 0, "red", "green")` 会从数组位置2开始插入字符串 "red" 和 "green" 。

  ``` js
  let colors = ["red", "green", "blue"]; 
  let removed = colors.splice(1, 0, "yellow", "orange"); // 在位置1插入两个元素
  console.log(colors);	// ["red", "yellow", "orange", "green", "blue"]
  console.log(removed);	// []
  ```

- **替换**

  `splice()` 在删除元素的同时可以在指定位置插入新元素，样要传入3个参数：开始位置、要删除元素的数量和要插入的任意多个元素。要插入的元素数量不一定跟删除的元素数量一致。比如，`splice(2, 1, "red", "green")` 会在位置2删除一个元素，然后从该位置开始向数组中插入 "red" 和 "green"。

  ``` js
  let colors = ["red", "green", "blue"]; 
  let removed = colors.splice(1, 1, "red", "purple"); // 插入两个值，删除一个元素
  console.log(colors);	// ["red", "red", "purple", "blue"]
  console.log(removed);	// ["green"]
  ```

  **思考：**

  ```   js
  let colors = ["red", "green", "blue"];
  //写一个方法将colors所有的内容清空并替换为["yellow", "white"]
  ```

### 2.13 寻找下标

- **indexOf**

  从左到右搜索第一个===的下标。

  ``` js
  [1,2,3].indexOf(1);	// 0
  [1,2,3].indexOf('1');	// -1，因为不全等，找不到就返回-1
  [1,2,3,1,5,6].indexOf(1, 2);	// 3，第二个参数是从x下标开始搜索
  ```

- **lastIndexOf**

  从右往左搜索第一个===的下标。

  ``` js
  [1,2,3,1,5,7].lastIndexOf(1);	// 3
  [1,2,3,1,5,7,1,5].lastIndexOf(1, 100);	// 6 第二个参数是从x下标开始搜索
  [1,2,3,1,5,7,1,5].lastIndexOf(1, 5);	// 3
  ```

**思考：**

``` js
[1,2,3,1,5,6].indexOf(1, -2);	// ?
[1,2,3,1,5,6].indexOf(1, -3);	// ?
[1,2,3,1,5,7,1,5].lastIndexOf(1, -7);	// ?
[1,2,3,1,5,7,1,5].lastIndexOf(1, -5);	// ?
```

### 2.14 includes

判断数组内是否有===的项。

``` js
[1,2,3,4,5,6].includes(1);	// true
[1,2,3,4,5,6].includes('1');	// false，因为不全等
[1,2,3,4,5,6].includes(8);	// false
```

### 1.2.15 find

根据条件查找数组内的单个项。

``` js
[1,2,3].find(c=> c === 1);	// 1
[1,2,3].find(c=> c == '1');	// 1
[1,2,3].find(c=> c === 5);	// undefined
[1,2,3].find(c=> c > 1);	// 2

const people = [{
    name: "Matt",
    age: 27
},
{
    name: "Nicholas",
    age: 29
}];
//三个参数分别是：当前遍历的项、当前下标、原始数组。
let p = people.find((element, index, array) => {
    console.log(element, index, array);
    return element.age > 28;
});
console.log(p);		// {name: "Nicholas", age: 29}
```

### 2.16 findIndex

根据条件查找数组内匹配项的下标。

``` js
[1,2,3].findIndex(c=> c === 3);	// 2
[1,2,3].findIndex(c=> c === 5);	// -1
[1,2,3].findIndex(c=> c > 1);	// 1
```

### 2.17 every

验证数组内每一个项是否匹配。

``` js
[1,2,3].every(c=> c === 3);	// false
[1,2,3].every(c=> c > 0);	// true
[1,2,3].every(c=> c < 10);	// true
[1,1,1].every(c=> c === 1);	// true
[1, 2, 3, 4, 5, 4, 3, 2, 1].every((item, index, array) => item > 2);    // false
```

### 2.18 some

验证数组内某一个项是否匹配。

``` js
[1,2,3].some(c=> c === 3);	// true
[1,2,3].some(c=> c > 0);	// true
[1,2,3].some(c=> c < 10);	// true
[1,1,1].some(c=> c === 1);	// true
[1,2,3].some(c=> c === 5);	// false
[1, 2, 3, 4, 5, 4, 3, 2, 1].some((item, index, array) => item > 2);     // true
```

### 2.19 filter

创建一个新数组，根据条件将搜索匹配的项放入至新数组内，并将此数组返回。

``` js
[1,2,3].filter(c=> c > 1);	// [2,3]
[1,2,3].filter(c=> c > 5);	// []
[1,2,3].filter(c=> c === 3);	// [3]
[1, 2, 3, 4, 5, 4, 3, 2, 1].filter((item, index, array) => item > 2);	//[3, 4, 5, 4, 3]
```

### 2.20 forEach

遍历每一个数组，传入回调函数，可对每一个项进行操作。

``` js
[1, 2, 3].forEach(c => {
    console.log(c * 2);
});
// 2 4 6

[1, 2, 3].forEach((item, index, array) => {
    console.log(item * index);
});
// 0 2 6
```

**思考：**

``` js
let numbers = [{ a: 1 }, { a: 2 }, { a: 3 }];
numbers.forEach((item, index, array) => {
    if (item.a > 1) {
        item.a = index;
    }
});
console.log(numbers);	// ?
```

### 2.21 flat

将多维数组扁平化，并返回一个新数组。方法接受一个数值，表示要扁平化的数组维度。

``` js
let ary = [1, [2, [3, [4, 5]]], 6];
console.log(ary.flat(1));	// [1, 2, Array(2), 6]
console.log(ary.flat());	// [1, 2, Array(2), 6]，不传参默认为1
console.log(ary.flat(2));	// [1, 2, 3, Array(2), 6]
console.log(ary.flat(3));	// [1, 2, 3, 4, 5, 6]
console.log(ary.flat(100));	// [1, 2, 3, 4, 5, 6]，可以超过维度深度，超过则会扁平化所有维度
console.log(ary);	// [1, Array(2), 6]
```

### 2.22 map

遍历数组，针对每一个项返回一个新值，将新值放进新数组里，最后将新数组返回。

``` js
[1, 2, 3].map(c => {
    return c * 2;
});	// [2,4,6]

[1, 2, 3].map(c => {
    return 2;
});	// [2,2,2]

[1, 2, 3].map((item, index, array) => {
    return item * index;
});	// [0,2,6]

[{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }, { a: 5 }].map(c => c.a);	// [1, 2, 3, 4, 5]
```

**思考：**

``` js
[1, 2, 3].map((item, index, array) => {
    return index;
});	// ?

[1, 2, 3].map((item, index, array) => {
    return index * array.length;
});	// ?

let numbers =[{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }, { a: 5 }];
//请使用map方法将numbers数据变为[3,6,9,12,15]

//请使用map方法将numbers数据变为[3,6,9,8,10]

let numbers = [{ a: 1, b: 10 }, { a: 2, b: 10 }, { a: 3, b: 10 }, { a: 4, b: 10 }, { a: 5, b: 10 }];
//请使用map方法将numbers数据变为[9,8,7,6,5]
```

### 2.23 join

数组拼接成字符串方法，方法传入拼接关键字。

``` js
[1,2,3].join(',');	// '1,2,3'
```

**思考：**

``` js
[{ a: 1 }, { a: 2 }].join(',');	// ?

let persons = [{ age: 50 }, { age: 12 }, { age: 30 }];
//请写一个方法将persons变为 '12,30,50'
```

### 2.24 pop

从原数组取出最后一个项。

``` js
let numbers = [1,2,3,4,5];
numbers.pop();	// 5
console.log(numbers);   // [1,2,3,4]

let empty = [];
empty.pop();	// undefined
console.log(empty);	// []
```

### 2.25 shift

从原数组取出第一个项。

``` js
let numbers = [1,2,3,4,5];
numbers.shift();    // 1
console.log(numbers);   // [2,3,4,5]
```

### 2.26 unshift

在原数组的头部添加随意数量的项，并返回添加后数组的长度。

``` js
let numbers = [1, 2, 3, 4, 5];
let length = numbers.unshift(7, 8, 9);
console.log(length);    // 8
console.log(numbers);   // [7, 8, 9, 1, 2, 3, 4, 5]
```

## 3 Set

Set是一个无法添加重复值的集合。

``` js
const set = new Set();	//创建一个空集合

const s1 = new Set(["val1", "val2", "val3"]);	// 使用数组初始化集合
console.log(s1.size);		// 3,长度访问跟数组的length不一样
s1.add("Matt").add("Frisbie");	//可以链式添加
s1.has('Matt');	// true，是否存在指定的项
console.log(s1);	// Set(5) {"val1", "val2", "val3", "Matt", "Frisbie"}
s1.add("Matt");
console.log(s1);	// Set(5) {"val1", "val2", "val3", "Matt", "Frisbie"}，无法添加重复项

let deleted = s1.delete('Matt');	// delete方法返回删除结果
console.log(deleted);   // true
console.log(s1);    // Set(4) {"val1", "val2", "val3", "Frisbie"}

deleted = s1.delete('Matt');
console.log(deleted);   // false，无法重复删除

//可通过for of访问每个项
for (let item of s1) {
    console.log(item);
}
//val1 val2  val3 Frisbie

//也可通过forEach方法访问
s1.forEach(item => console.log(item));
```

> **Set的经典应用-去重**

``` js
let numbers = [1, 2, 3, 5, 6, 1, 2, 3];
numbers = Array.from(new Set(numbers));
console.log(numbers);   // [1, 2, 3, 5, 6]
```



``` js


```



