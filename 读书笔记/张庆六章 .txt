第五章 基本引用类型
本章内容
1.理解对象
2.基本JavaScript数据类型
3.原始值与原始值包装类型
1.原始值和引用值
在 ECMAScript 中，变量可以存在两种类型的值，即原始值和引用值。

1.1 原始值
(1).原始值指的是原始类型的值，也叫基本类型，例如 Number、Stirng、Boolean、Null、Underfined 。

(2).存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。

(3).注意:

在许多语言中，字符串都被看作引用类型，而非原始类型，因为字符串的长度是可变的。ECMAScript 打破了这一传统。

1.2引用值
（1）引用值指的是 引用类型 的值，例如 Object、Function、Array、Date、RegExp 。

（2）存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。

2.栈和堆
2.1原始值存储在栈中
为变量赋值时，ECMAScript 的解释程序必须判断该值是原始类型，还是引用类型。要实现这一点，解释程序则需尝试判断该值是否为 ECMAScript 的原始类型之一，即 Undefined、Null、Boolean、Number 和 String 型。由于这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 - 栈中。这样存储便于迅速查寻变量的值。

2.2 引用值存储在堆中
如果一个值是引用类型的，那么它的存储空间将从堆中分配。由于引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。

二.原始值包装类型
为了方便操作原始值，ECMAScript有3种特殊引用类型：

Boolean,Number和String.

每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，暴露出操作原始值的各种方法。

在以读模式访问字符串的方法或者属性时，总会在后台执行以下三步： （1）创建一个原始值类型的实例 （2）调用这个实例上的方法（或读取这个实例上的属性） （3）销毁这个实例

用代码表示出来则为：

let str = new String('I love China!');
console.log(str.slice(0,6));
str = null;
所以在非严格模式下，当我们尝试给原始值赋值时str.age=18，其实是生成了一个原始值包装类型的，也是给它赋了值的，但是，这句话执行完之后，这个原始值包装类型就被销毁了。而在下一次再次读取这个属性时console.log(str.age)，其实又再次创建了一个原始值包装类型对象，这个对象和之前那个不是一个对象，所以str.age为undefined

三 基本JavaScript数据类型
在JavaScript种一共有6种数据类型：Null、Undefined、Boolean、String、Number、Object。其中Object是一种复杂数据类型。

基本数据类型：Null、Undefined、Boolean、String、Number。

引用数据类型：Object、Array、Date、RegExp。

Date 类型提供关于日期和时间的信息，包括当前日期、时间及相关 计算。

RegExp 类型是ECMAScript支持正则表达式的接口，提供了大多数基 础的和部分高级的正则表达式功能。

JavaScript中的对象称为引用值，几种内置的引用类型可用于创建特定 类型的对象。 引用值与传统面向对象编程语言中的类相似，但实现不同。


第六章 
需求：对象，数组，set使用方法

1.object对象
大多数引用值的示例使用的是 Object 类型。Object 是ECMAScript中最常用的类型之一。虽然 Object 的实例没有
多少功能，但很适合存储和在应用程序间交换数据。

obj实例有两种方式
1.是使用 new 操作符和 Object 构造函数
如下所示：
let person = new Object();
person.name = "Nicholas";
person.age = 29;

2.使用对象字面量
字面量表示法：
let person = {
name: "Nicholas"
,
age: 29
};


 2.Array
除了 Object ， Array 应该就是ECMAScript中最常用的类型了。
ECMAScript数组跟其他编程语言的数组有很大区别。跟其他语言中的数组
一样，ECMAScript数组也是一组有序的数据，但跟其他语言不同的是，数
组中每个槽位可以存储任意类型的数据。这意味着可以创建一个数组，它
的第一个元素是字符串，第二个元素是数值，第三个是对象。ECMAScript
数组也是动态大小的，会随着数据添加而自动增长。


3.创建数组
1.使用Array构造函数
如：
let colors = new Array();
2.用数组字面量
// 创建一个包含3个元素的数组
let colors =["red","blue","green"];
//创建一个空数组
let names = [];
//创建一个包含2个元素的数组
let values = [1,2,];

在这个例子中，第一行创建一个包含3个字符串的数组。第二行用一
对空中括号创建了一个空数组。第三行展示了在数组最后一个值后面加逗
号的效果： values 是一个包含两个值（1和2）的数组。

Array 构造函数还有两个ES6新增的用于创建数组的静态方法：
from() 和 of() 。 from() 用于将类数组结构转换为数组实例，而
of() 用于将一组参数转换为数组实例。

Array.from() 的第一个参数是一个类数组对象，即任何可迭代的
结构，或者有一个 length 属性和可索引元素的结构。
三。数组
使用数组字面量初始化数组时，可以使用一串逗号来创建空位
（hole）。ECMAScript会将逗号之间相应索引位置的值当成空位，ES6规
范重新定义了该如何处理这些空位。
可以像下面这样创建一个空位数组：
const options = [,,,,,]; // 创建包含5个元素的数组
console.log(options.length); // 5
console.log(options); // [,,,,,]
ES6新增的方法和迭代器与早期ECMAScript版本中存在的


创建数组
创建数组，为其赋值，然后输出这些值。
For...In 声明
使用 for...in 声明来循环输出数组中的元素。
合并两个数组 - concat()
如何使用 concat() 方法来合并两个数组。
用数组的元素组成字符串 - join()
如何使用 join() 方法将数组的所有元素组成一个字符串。
文字数组 - sort()
如何使用 sort() 方法从字面上对数组进行排序。
数字数组 - sort()
如何使用 sort() 方法从数值上对数组进行排序。

set使用方法
ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。


const s = new Set();
 
[2,3,5,4,5,2,2].forEach(x => s.add(x));
// Set结构不会添加重复的值
 
for(let i of s) {
  console.log(i);
}
// ## 初始化
// 例一 可以接受一个数组作为参数
const set = new Set([1,2,3,4,4,]);
 
// ...将一个数组转为用逗号分隔的参数序列
console.log([...set]);