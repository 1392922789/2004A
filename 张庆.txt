1.
 面向对象的世界里，到处都是对象。对象不光有「数据」和「能力」，还可以接受命令。例如你可以让「狗」这个对象「吃狗粮」，就可以把「吃狗粮」的命令发给「狗」让其执行，然后我们就实现了「狗吃狗粮」的需求。
 
我们创建的对象，应该是刚刚好能做完它能做的事情，不多做，不少做。多做了容易耦合，各种功能杂糅在一个对象里。比如我有一个对象叫「汽车」，可以「行驶」，可以「载人」，现在的需求是要实现「载人飞行」，就不能重用这个对象，必须新定义一个对象「飞机」来做。如果你给「汽车」插上了翅膀，赋予了它「飞行」的能力，那么新来的同学面对你的代码就会莫名其妙，无从下手。


2.深入理解面向对象
面向对象本质的说法：是先有了问题，然后才有解决方案
是顺序，是目的。
是先有方法函数，然后才有类；是有了类，然后才有了继承……


我举一个例子：
现在有两个类，一个用户类（User），一个博客类（Blog），现在有一个发布博客的方法（Publish）。
那么，“发布博客”这个方法，究竟是应该放在用户的类里面，还是博客的类里面？即：究竟是User.Publish(Blog)呢，还是Blog.Publish()？

如果按照“万物皆对象”，“对象映射实体”，“方法就是对象的行为”……之类的格言来套的话，当然应该是User.Publish(Blog)，你看，用户 发布 博客，一一对应啊！美滴很~~就像我们老师教的那样，名词做对象，动词做方法……

3.
一、面向过程
面向过程就是面向解决问题的过程进行编程，实质上就是按照面向过程的思想去解决问题。我们罗列的步骤就是过程，按照步骤解决问题就是面向过程。
传统的面向过程的编程思想总结起来就八个字——自顶向下，逐步细化！

二、面向对象
面向过程主要是针对功能，而面向对象主要是针对能够实现该功能的背后的实体。面向对象实质上就是面向实体，所以当我们使用面向对象进行编程时，一定要建立这样一个观念：万物皆对象！

 面向对象和面向过程的比较：
1.都可以实现代码重用和模块化编程，但是面对对象的模块化更深，数据更封闭，也更安全！因为面向对象的封装性更强！

2.面对对象的思维方式更加贴近于现实生活，更容易解决大型的复杂的业务逻辑

3.从前期开发角度上来看，面对对象远比面向过程要复杂，但是从维护和扩展功能的角度上来看，面对对象远比面向过程要简单！