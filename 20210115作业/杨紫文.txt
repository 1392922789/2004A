1.用解构赋值的方式将 PageIndex,PageSize,id,category,subject,format,changed解构出来
{
  "paramz": {
    "feeds": 
      [{
        "id": 299076,
        "category": "article",
        "data": {
          "subject": "荔枝新闻3.0：不止是阅读",
          "format": "txt",
          "changed": "2015-09-22 16:01:41"
        }
      }],
    "PageIndex": 1,
    "PageSize": 20
  }
}
var {params:{feeds:{id,category,data{subject}}},PageIndex,PageSize}=obj
2.
//获取用户
function getUser(id) {
    return Promise.resolve(id + 1);
}

//根据用户获取角色
function getRoleByUser(id) {
    return Promise.resolve(id + 1);
}

//根据角色获取权限
function getRightsByRole(id) {
    return Promise.resolve(id + 1);
}

function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });
}
//改为同步的方式执行
async function ab(){
	getUser().then(userid=>{
		getRoleByUser().then(roleid=>{
			getRightsByRole().then(rights=>{
				
			}roleid)
		}userid)
	})
}
var userid =await getUser()
var roleid =await getRoleByUser(userid)
var rights =await getRightsByRole(roleid)
3.
function Number(length) {
    this.length = length;
}

Numbe.prototype.push = function(arr) {

}

Numbe.prototype.pop = function() {

}

Numbe.isNumber = function(arr) {

}

//转换为class的方式
Number.prototype.constructor===Number
class Number {
	constructor(length) {
    		this.length = length;
	}
	push (arr){

	}
	pop(){
	
	}
	static  isNumber(arr){

	}
}

5.阅读本篇文章https://segmentfault.com/a/1190000007535316，写出看懂和没看懂的地方。async 和awaite看的还算可以，在做题中用到了理解的就多一点
async 返回一个Promise 对象，awaite是等待async返回的值，如果awaite等到的是一个Promise，他会阻塞后面代码的执行，所以把awaite放到assync中不会造成阻塞。
用async/await处理then链中的多层回调问题懵懂
6.阅读本篇文章https://github.com/mqyqingfeng/Blog/issues/3	 写出看懂和没看懂的地方。
作用域理解了怎么查找变量，逐级向上查找。动态作用域没太懂
7.阅读本篇文章https://learnku.com/articles/50523，写出看懂和没看懂的地方。
js函数作用域是一层一层向上。看到箭头函数的this是指向的是父级的作用域。


面向过程：就是按照分析好的规定的步骤按部就班从上往下一步步执行，自上到下，逐渐细化
面向对象：面对对象的，数据封闭，也更安全！面向对象的封装性强！更容易解决大型的复杂的逻辑
