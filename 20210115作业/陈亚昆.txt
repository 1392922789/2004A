1.用解构赋值的方式将 PageIndex,PageSize,id,category,subject,format,changed结构出来
{
  "paramz": {
    "feeds":  
      {
        "id": 299076,
        "category": "article",
        "data": {3
          "subject": "荔枝新闻3.0：不止是阅读",
          "format": "txt",
          "changed": "2015-09-22 16:01:41"
        }
      },
    "PageIndex": 1,
    "PageSize": 20
  }
}


let {
paramz
} = obj;
// 
let {
paramz: {
feeds
}
} = obj;
// 
let {
paramz: {
feeds: {
data
}
}
} = obj;
console.log(paramz.PageIndex)
console.log(paramz.PageSize)
console.log(paramz.feeds.id)
console.log(paramz.feeds.category)
console.log(paramz.feeds.data.subject)
console.log(paramz.feeds.data.subject)
console.log(paramz.feeds.data.format)
console.log(paramz.feeds.data.changed)





2.//获取用户
function getUser(id) {
    return Promise.resolve(id + 1);
}

//根据用户获取角色
function getRoleByUser(id) {
    return Promise.resolve(id + 1);
}

//根据角色获取权限
function getRightsByRole(id) {
    return Promise.resolve(id + 1);
}

async function ab() {
    //先获取用户

await  getUser(1).then(c => {
        //根据用户ID获取角色
    
await getRoleByUser(c).then(d => {
            //根据角色ID获取权限
          
await getRightsByRole(d).then(c => {
            });
        });
    });
}
//改为同步的方式执行





3.
function Array(length) {
    this.length = length;
}

Array.prototype.push = function(arr) {

}

Array.prototype.pop = function() {

}

Array.isArray = function(arr) {

}

//转换为class的方式



class Array {
constructor(length) {
this.length = length;
}
push(arr){
}
pop(){
}
static isArray(arr){
}
}


http://www.woshipm.com/pmd/294180.html


https://www.jianshu.com/p/72ca5a9ff2c9


https://zhuanlan.zhihu.com/p/97994403


面向对象是向现实世界模型的自然延伸，这是一种万物皆对象的编程思想，在现实生活中的任何物体都可以归为一类事物，而每一个个体都是一类事物的实例。面向对象编程是以对象为中心，以消息为驱动，所以 程序=对象+消息。
1、抽象
对一类事物的属性和方法（行为/功能）抽取出来进行归纳、整理、总结，比如：汽车有轮子、发动机，这属于汽车的属性，汽车能跑，这是汽车的功能。可以把这些属性和功能（行为）抽取出来放进一个类中，供汽车这一类事物使用。类相当于模具，而对象则是通过模具造出来的物体（实例）。
2、封装
将对象的属性、方法（行为/功能）隐藏起来，尽可能多的隐藏对象内部的实现细节，仅提供对外访问的公告接口。
属性私有化，行为公开化
3、继承
子类继承父类的属性和方法（行为/功能），根据自己的需求扩展新的属性和方法（行为/功能），是为了提高代码的复用性。
4、多态
多态就是指同一种事物在不同的情况下的多种表现形式。
具体的实现方式就是：接口实现，继承父类进行方法重写，同一个类中进行方法重载。
封装和继承都是为Java语言的多态提供了支撑；
多态存在的三个必要条件：

要有继承；
要有重写；
父类引用指向子类对象。
