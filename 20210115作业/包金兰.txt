理解面向对象：

经典案例：把大象塞进冰箱
1>>面向过程的做法：1.打开冰箱门 2.把大象塞进去 3.关闭冰箱门
当有两个不同的人用不同的方法实现这样的步骤，我们需要为不同的人量身定做不同解决事情的方法。
2>>面向对象，找个对象帮你做事
我们把冰箱作为对象，1.冰箱门可以被打开 2.大象可以被塞进去 3.冰箱门可以被关闭（面向对象写出通用的方法，屏蔽了所有人的差异）

三大特性：
封装
---->减少了大量的冗余代码
---->封装将复杂的功能封装起来，对外开放一个接口，简单调用即可。
将描述事物的数据和操作封装在一起，形成一个类；被封装的数据和操作只有通过提供的公共方法才能被外界访问（封装隐藏了对象的属性和实施细节），私有属性和方法是无法被访问的，表现了封装的隐藏性，增加数据的安全性。

继承–单根性，传递性
---->减少了类的冗余代码
---->让类与类之间产生关系，为多态打下基础
若一个新类继承了原有类的属性和方法，并增加了自己的新属性和新方法，称之为派生类，派生类就继承了原有类；当子类继承父类的时候，子类不继承父类的构造函数，但是子类生成对象时(new Student())默认会先执行父类无参的构造函数（实例化对象，让子类可以使用父类的成员），当父类定义有参构造函数时，无参构造函数就会被干掉，这时子类会报错，解决方案是1>在父类重新定义无参构造函数 2>子类的构造函数：base()，调用有参构造函数，函数体中只需初始化特有属性；如果不想执行父类的构造函数，可以通过参数的不同调用父类一个空的构造函数。

多态
----->虚方法 virtual override
----->抽象类 abstract override
----->接口 interface
很重要的一个概念，一个接口，多个方法。通过继承实现的不同对象调用相同的方法，进而有不同的行为，实例如下：abstract-override


抽象父类有方法Body(),子类继承父类重写Body方法，new出不同的对象，这些对象去执行相同的Body方法，有不同的执行结果，这就是多态；